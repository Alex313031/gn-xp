{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f811f11b_0729d292",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-10-26T19:36:04Z",
      "side": 1,
      "message": "I lack the hardware to actually test whether this resolves the mac builder flake, but I did test by removing the #if MAC_OS and checking that `/usr/bin/env` remained an absolute path in Fuchsia\u0027s build.ninja.d.",
      "revId": "ed989d87f539215f7385bc604f29a80c46ca4792",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1883b5aa_060e053a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-10-26T21:20:25Z",
      "side": 1,
      "message": "I\u0027ll defer to Scott for this review.",
      "revId": "ed989d87f539215f7385bc604f29a80c46ca4792",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19cbc240_8dac501a",
        "filename": "src/gn/filesystem_utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-10-26T21:20:25Z",
      "side": 1,
      "message": "Can we reference a bug here?",
      "range": {
        "startLine": 483,
        "startChar": 5,
        "endLine": 483,
        "endChar": 30
      },
      "revId": "ed989d87f539215f7385bc604f29a80c46ca4792",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7a1a873_f7065f23",
        "filename": "src/gn/filesystem_utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-10-26T22:02:31Z",
      "side": 1,
      "message": "Ack, will do.",
      "parentUuid": "19cbc240_8dac501a",
      "range": {
        "startLine": 483,
        "startChar": 5,
        "endLine": 483,
        "endChar": 30
      },
      "revId": "ed989d87f539215f7385bc604f29a80c46ca4792",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bc9c396_9790e4ce",
        "filename": "src/gn/filesystem_utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-26T21:36:50Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s just `/usr/bin`, I have managed to reproduce this issue for `/usr/lib` and even `/bin`.\n\nmacOS Catalina and newer uses two different volumes (https://support.apple.com/en-us/HT210650): read-only system volume mounted at `/` and a writable data volume that\u0027s mounted at `/System/Volumes/Data` and used as an overlay (so for example `/usr/local` is really `/System/Volumes/Data/usr/local`).\n\nFrom what I can tell in my testing I\u0027ve done so far, the ENOENT issue is manifesting for all files on the read-only system volume, but not for the writable data volume.",
      "range": {
        "startLine": 484,
        "startChar": 5,
        "endLine": 484,
        "endChar": 42
      },
      "revId": "ed989d87f539215f7385bc604f29a80c46ca4792",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38271cde_64e5c351",
        "filename": "src/gn/filesystem_utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-10-26T22:02:31Z",
      "side": 1,
      "message": "I\u0027m glad there is a little less mystery around why it was impacting /usr/bin/ and no other input files. On the other hand, that certainly makes it more difficult to work around. It seems like testing for !/usr/local would likely be too wide of a net, and listing all of the directories in the read-only volume would be fragile. \n\nAny better ideas on how to check?",
      "parentUuid": "4bc9c396_9790e4ce",
      "range": {
        "startLine": 484,
        "startChar": 5,
        "endLine": 484,
        "endChar": 42
      },
      "revId": "ed989d87f539215f7385bc604f29a80c46ca4792",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92c77c9c_3a36019e",
        "filename": "src/gn/filesystem_utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2020-10-28T16:51:19Z",
      "side": 1,
      "message": "Thanks for that pointer Petr. I guess we\u0027d need to have it actually check which volume the target path is on, which seems pretty horrible (and assuming there\u0027s even a reasonable api for doing so).\n\nWhile it wouldn\u0027t help for GN-on-Catalina in general, I wonder if we should pursue something different in Fuchsia then. For example, in a jiri runhooks, we could make copies of the binaries that would otherwise be outside the source tree (which would implicitly move them to the data volume).\n\nI\u0027ll take a look at the ninja files on a Mac build now and see how many there are, but I\u0027m hoping it\u0027s not really that many since we try to keep our toolchain/etc all hermetic and shiny (ish?)",
      "parentUuid": "38271cde_64e5c351",
      "range": {
        "startLine": 484,
        "startChar": 5,
        "endLine": 484,
        "endChar": 42
      },
      "revId": "ed989d87f539215f7385bc604f29a80c46ca4792",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fe10de2_52dde9c8",
        "filename": "src/gn/filesystem_utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-28T17:46:52Z",
      "side": 1,
      "message": "\u003e Thanks for that pointer Petr. I guess we\u0027d need to have it actually check which volume the target path is on, which seems pretty horrible (and assuming there\u0027s even a reasonable api for doing so).\n\nI experimented with this a bit and one solution I came up with is to use statfs and compare f_mntonname of the file with the one of the build directory. That seems to work in this case but I don\u0027t know how well does it generalize.\n\n\u003e While it wouldn\u0027t help for GN-on-Catalina in general, I wonder if we should pursue something different in Fuchsia then. For example, in a jiri runhooks, we could make copies of the binaries that would otherwise be outside the source tree (which would implicitly move them to the data volume).\n\nWe could consider providing a prebuilt of toybox (or equivalent that supports all host platforms we want to support) and use that in our build which would also help hermeticity.\n\n\u003e I\u0027ll take a look at the ninja files on a Mac build now and see how many there are, but I\u0027m hoping it\u0027s not really that many since we try to keep our toolchain/etc all hermetic and shiny (ish?)",
      "parentUuid": "92c77c9c_3a36019e",
      "range": {
        "startLine": 484,
        "startChar": 5,
        "endLine": 484,
        "endChar": 42
      },
      "revId": "ed989d87f539215f7385bc604f29a80c46ca4792",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ]
}
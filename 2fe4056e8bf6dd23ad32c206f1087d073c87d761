{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ff941d6b_05beaedb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-03-15T23:58:34Z",
      "side": 1,
      "message": "tmandry@ hello. Would you be kind enough to take a first look here before we pass onto Petr/Brett?\n\nWe\u0027ve discussed this sort of change in the past.\n\nWe need to provide the correct -D and -I flags to bindgen, built using all the flags accumulated from all the configs throughout the source tree.\n\nThe current way to do that is to declare an extra \"toolchain\", but this toolchain gets fed every .cc file, resulting in thousands of extra build steps when we really just want to run bindgen over a single header file.\n\nWith this relatively small change, we can instead access the -D and -I flags directly from a gn \u0027action\u0027.\n\nIf you approve of the broad concept, then I\u0027ll pass this onto the gn owners for review of the details.",
      "revId": "2fe4056e8bf6dd23ad32c206f1087d073c87d761",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dea0db9_75058d72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2022-03-18T23:05:02Z",
      "side": 1,
      "message": "This seems like a sensible solution to a problem I\u0027ve bumped into a number of times before. I\u0027m supportive but this definitely needs Brett to take a look.",
      "revId": "2fe4056e8bf6dd23ad32c206f1087d073c87d761",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05dcaffc_f3cc9b59",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2022-03-21T17:42:27Z",
      "side": 1,
      "message": "Interesting! I think this could be very useful to integrate other languages and compilers also (e.g. how Go is kind of hacked in). My understanding is you only added the variables you listed to action().\n\nBut I think if we\u0027re going to do this it\u0027s worth being general and I think we should make configs and config values work generally for actions and action_foreach.\n\nI think this means adding \"configs\" and \"public_configs\" support for actions, supporting config variables (defines, etc.) directly on action[_foreach] targets. Hopefully this should be pretty easy to implement since it already exists for other target types.\n\nWhat do you think?",
      "revId": "2fe4056e8bf6dd23ad32c206f1087d073c87d761",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ad54611_36d124e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-03-21T18:11:42Z",
      "side": 1,
      "message": "Thanks for taking a look. It\u0027s my intention that this does already work for configs - that is in fact just the bit we need in Chrome - and this is (somewhat) tested by the unit test I added. But I must admit I was a bit hazy on how all the config values are propagated and deduced so I might well have missed something.\n\nI haven\u0027t thought about public_configs so I\u0027ll keep this comment thread open to have a poke around and see if I need to do anything differently.",
      "parentUuid": "05dcaffc_f3cc9b59",
      "revId": "2fe4056e8bf6dd23ad32c206f1087d073c87d761",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bca0edb6_1ad55949",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2022-03-21T21:04:50Z",
      "side": 1,
      "message": "Sounds good, I think all you\u0027ll likely need to change is just some conditionals on the target type or perhaps the call to actually read the variable from the action target generator.",
      "parentUuid": "2ad54611_36d124e9",
      "revId": "2fe4056e8bf6dd23ad32c206f1087d073c87d761",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4a6012e_a12021b2",
        "filename": "src/gn/functions_target.cc",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2022-03-18T23:05:02Z",
      "side": 1,
      "message": "Perhaps we should generalize this to variables available to any tool (cflags, rustflags, ...)?\n\nOf course we can start small and expand it later.",
      "revId": "2fe4056e8bf6dd23ad32c206f1087d073c87d761",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52b98322_35a07909",
        "filename": "src/gn/functions_target.cc",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-03-21T18:11:42Z",
      "side": 1,
      "message": "You\u0027re absolutely right, I found I already needed cflags! If Brett is supportive I will expand this out to make all the variables available.",
      "parentUuid": "e4a6012e_a12021b2",
      "revId": "2fe4056e8bf6dd23ad32c206f1087d073c87d761",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ]
}
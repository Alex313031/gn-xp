{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "25836d36_ef9fce8c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-21T17:05:13Z",
      "side": 1,
      "message": "Should we consider introducing rust_dynamic_library?",
      "range": {
        "startLine": 11,
        "startChar": 64,
        "endLine": 12,
        "endChar": 33
      },
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58498d10_070b6a13",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-07-16T21:30:31Z",
      "side": 1,
      "message": "We certainly could.. it would be nice if we did the same for executable and static_library then.\n\nThis makes it easier in the build to specialize behavior on the language being compiled. I\u0027m not sure if it has any advantages over making a function available that returns the language of a target, though.",
      "parentUuid": "25836d36_ef9fce8c",
      "range": {
        "startLine": 11,
        "startChar": 64,
        "endLine": 12,
        "endChar": 33
      },
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fd56e2c_09cd0650",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-10T02:40:09Z",
      "side": 1,
      "message": "No worries, but Ben isn\u0027t on the project anymore so I\u0027m adding Aaron and Dan in hopes that either of them can back up what I say here.\n\nCorrectness of this patch hinges on the claim:\n\n\u003e Rust dylibs are handled pretty much exactly like rlibs\n\nThe code changes are just making it so they\u0027re handled the same.\n\nUnfortunately I can\u0027t find a lot of documentation for this, but the compiler source itself is documented[1]. Inside the compiler they are handled differently, but the interface strives to make them equivalent, even to the point of automatically choosing between an rlib and dylib form of the same crate for you, if you use -l flags. (I don\u0027t know why. We never let rustc choose since we use --extern flags to point to the file directly, yay for being explicit!)\n\nI forgot to mention this in the commit message but I actually tested this in the fuchsia tree and was able to build and link against a dylib crate, which never worked before.\n\n[1]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_metadata/locator/index.html#rlibs-and-dylibs",
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abf703f9_5767625a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-03-02T02:04:53Z",
      "side": 1,
      "message": "Petr, could you take a look at this?",
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd114f2b_3bcbe008",
        "filename": "src/gn/rust_values.cc",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2021-03-02T15:26:05Z",
      "side": 1,
      "message": "nit: Correct me if I\u0027m wrong, but it looks like this method should receive the |target| value that this RustValue instance is created from to work properly. In this case, what do you think about turning this into a static method as in:\n\n  // static\n  RustValues::CrateType RustValues::InferredCrateType(const Target* target) const {\n    CrateType crate_type \u003d target-\u003erust_values().crate_type();\n    if (crate_type !\u003d CRATE_AUTO) {\n      return crate_type;\n    }\n    switch (target-\u003eoutput_type()) {\n       ...\n     }\n  }\n\nThis would simplify call sites and be slightly less error prone, i.e.:\n\n  RustValues::InferredCrateType(target)\n\nInstead of:\n\n  target-\u003erust_values().InferredCrateType(target)",
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ee3da8a_d02bdbb3",
        "filename": "src/gn/rust_values.cc",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-07-16T21:30:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd114f2b_3bcbe008",
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bc22ec2_89b5334b",
        "filename": "src/gn/rust_values.cc",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-21T17:05:13Z",
      "side": 1,
      "message": "FYI I was hoping we would eventually eliminate crate_type altogether, I think exposing that variable was a mistake because it allows things like:\n\nexecutable(\"foo\") {\n  crate_type \u003d \"rlib\"\n}\n\nIt\u0027s unclear what should be the result of that.\n\nCan you leave a TODO comment here that mentions that?",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 3
      },
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "756d6e76_5812fbdc",
        "filename": "src/gn/rust_values.cc",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-07-16T21:30:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2bc22ec2_89b5334b",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 3
      },
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14007a61_c822692c",
        "filename": "src/gn/rust_values.cc",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000288
      },
      "writtenOn": "2021-03-02T14:34:31Z",
      "side": 1,
      "message": "related to my other comment, is there a scenario where this is a valid output or is this a failure case?",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 24
      },
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44a0ce07_1fd57af2",
        "filename": "src/gn/rust_values.cc",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-07-16T21:30:31Z",
      "side": 1,
      "message": "Failure case; this is now documented.",
      "parentUuid": "14007a61_c822692c",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 24
      },
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2261765c_b6c1554d",
        "filename": "src/gn/rust_values.h",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2020-12-10T16:09:53Z",
      "side": 1,
      "message": "Does this comment need to be updated or appended to account for the new `InferredCrateType`?",
      "range": {
        "startLine": 22,
        "startChar": 2,
        "endLine": 25,
        "endChar": 53
      },
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e58254a8_4fceb71a",
        "filename": "src/gn/rust_values.h",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-16T00:03:58Z",
      "side": 1,
      "message": "The comment is still correct. InferredCrateType is more of a utility function that duplicates the same (implicit) logic already followed by GN for CRATE_AUTO.",
      "parentUuid": "2261765c_b6c1554d",
      "range": {
        "startLine": 22,
        "startChar": 2,
        "endLine": 25,
        "endChar": 53
      },
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acb52c3c_d24e3fae",
        "filename": "src/gn/rust_values.h",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2021-03-02T15:26:05Z",
      "side": 1,
      "message": "nit: I find the use of the word \"specified\" twice to mean two different things a little bit annoying in the comment. What about clarifying it as in:\n\n  // Library crate types. The default value CRATE_AUTO means the type should\n  // be deduced from the target type (see InferredCrateType() below).",
      "parentUuid": "e58254a8_4fceb71a",
      "range": {
        "startLine": 22,
        "startChar": 2,
        "endLine": 25,
        "endChar": 53
      },
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6290e613_f582bee0",
        "filename": "src/gn/rust_values.h",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-07-16T21:30:31Z",
      "side": 1,
      "message": "I like that. Done.",
      "parentUuid": "acb52c3c_d24e3fae",
      "range": {
        "startLine": 22,
        "startChar": 2,
        "endLine": 25,
        "endChar": 53
      },
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37c5a00a_40beb2ae",
        "filename": "src/gn/rust_values.h",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2021-03-02T15:26:05Z",
      "side": 1,
      "message": "nit: Maybe clarify that CRAT_AUTO will translate RUST_LIBRARY target types to CRATE_DYLIB by default, and that cdylib targets should call set_crate_type(CRATE_CDYLIB) explicitly?\n\nAlso mention that this will return CRATE_AUTO for unsupported target types (e.g. GROUP or ACTION).",
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56f944b4_c78e5e32",
        "filename": "src/gn/rust_values.h",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-07-16T21:30:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37c5a00a_40beb2ae",
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5417667_a61e8ba1",
        "filename": "src/gn/tool.cc",
        "patchSetId": 3
      },
      "lineNbr": 362,
      "author": {
        "id": 1000288
      },
      "writtenOn": "2021-03-02T14:34:31Z",
      "side": 1,
      "message": "shouldn\u0027t this cause an error if the type has been inferred?",
      "range": {
        "startLine": 362,
        "startChar": 0,
        "endLine": 362,
        "endChar": 34
      },
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "544a7456_50d8d750",
        "filename": "src/gn/tool.cc",
        "patchSetId": 3
      },
      "lineNbr": 362,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-07-16T21:30:31Z",
      "side": 1,
      "message": "Maybe, but this behavior is pre-existing.",
      "parentUuid": "f5417667_a61e8ba1",
      "range": {
        "startLine": 362,
        "startChar": 0,
        "endLine": 362,
        "endChar": 34
      },
      "revId": "5cc468f611a70ca3dc1802a7dac81e947cc8c35c",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ]
}
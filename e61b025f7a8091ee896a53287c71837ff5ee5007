{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e54e81c1_d52e7385",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000803
      },
      "writtenOn": "2020-10-11T00:46:17Z",
      "side": 1,
      "message": "Hi all,\n\nFollowing the discussion from https://groups.google.com/a/chromium.org/forum/#!topic/gn-dev/QDvOuquATJE, would you please help review this CL on exposing a command line switch to tell GN where to find the top-level BUILD.gn to load first? From experiments, it seems this will perfectly fit our needs (achieving kind of \"partial configuration\" of chromium to share the icu library between Chrome and CrOS). Thanks!\n\nBest,\nHonglin",
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "478e0edb_30981015",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-10-11T03:01:03Z",
      "side": 1,
      "message": "We used to have this to support NaCl and it was removed because we didn\u0027t need it anymore and it added extra complexity. Needless to say, I\u0027m not super enthusiastic about adding it back.\n\nCan you please follow up on the email thread? Dirk had some good suggestions that you did not reply to.",
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a71a34b_6c115a9a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000803
      },
      "writtenOn": "2020-10-11T05:34:16Z",
      "side": 1,
      "message": "Hi Brett,\n\nThanks for the super quick reply! Dirk and I have had a long discussion after that. I will forward those emails to you. This CL was actually inspired from one of his suggestions (otherwise, I will never notice that we can do this). \n\nBest,\nHonglin",
      "parentUuid": "478e0edb_30981015",
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b18fbbc_bc2ac399",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000803
      },
      "writtenOn": "2020-10-11T09:41:24Z",
      "side": 1,
      "message": "Hi Brett,\n\nPlease let me explain a bit more on why this feature is useful for us:\n\n1. \"share icu library\": One current big issue for CrOS is that the free space of the rootfs is very small. And icu is a big library, most of which is a data file (in chrome it is 10MB whereas by default it is \u003e30MB). So we decide to share this data file between Chrome and CrOS. But to use this data file, we must keep CrOS\u0027s icu and Chromium\u0027s icu in lock step. So directly compiling a libicu.a is from Chrome in CrOS is a straight-forward solution.\n   Another goodness of sharing libicu is that we save developers effort to uprev icu in CrOS. libicu needs regular major uprev every 6 months and minor bug fixes from time to time. By sharing the code, CrOS can enjoy such uprev for free.\n\n2. (The CrOS build team proposed this) In the long term, we may share more code between chrome and CrOS. For example, we may even share libchrome/libmojo etc. directly by the way similar to icu rather than the current mechanism (which is effort consuming and hard to make the code up-to-date). \"Sharing icu\" is treated as a template for sharing code between chrome and CrOS. And we want to find a standard and generic way to do this.\n\n3. In compiling libicu.{a,so} from chromium repo, if GN does not support \"partial configuration\", we have to configure the whole chromium to run \"gn gen\". This is very error-prone and brings lots of unnecessary complexity to the icu ebuild in CrOS.\n\nConsidering the benefit the new switch \"root_build_file_dir\", I feel the extra complexity added to GN is relatively not very big (just one extra switch affecting one global/starting variable \"root\"). What do you think? If the idea of this CL is really not acceptable, could you please provide some other suggestions, which will be highly appreciated?\n\nThanks!\n\nBest,\nHonglin\n",
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56e9fff5_59e3ae4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000803
      },
      "writtenOn": "2020-10-13T21:01:33Z",
      "side": 1,
      "message": "Friendly ping, shall we discuss more about this? After more thinking, I really feel this small change will be a game changer for our project. Thanks!",
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d08889fa_62259c01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-10-15T01:03:43Z",
      "side": 1,
      "message": "Sorry I\u0027ve been so late...\n\nThe switch behaves differently than I expected and I wonder if it does what you need. I was expecting you would need to maintain the same definition of the \"//\" directory so that \"//third_party/icu\" is still the same, just replace the file. In this case you don\u0027t want to define the source root at all, you just need to supply a different BUILD file to load initially. This also means there\u0027s no interaction with the \"--root\" flag.\n\n(This is the behavior we had before that was removed.)\n\nI wrote the suggested documentation below assuming this new behavior. If you think you need to affect the definition of \"//\" we should discuss further. Can that be done by combining the two flags?",
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fe5e744_feafe6c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000803
      },
      "writtenOn": "2020-10-15T01:38:52Z",
      "side": 1,
      "message": "Thank you very much for the review! The helper message has been improved a lot. And it is not late at all (P.S. I think it is very quick considering everyone must be very busy at the beginning of a new quarter).\n\nYes, \"not affecting the definition of //\" is indeed what I expected. And I feel this is necessary because if we change the \"//\" to, say, \"//third_party/icu\", maybe we can not see the files/dependencies outside of that folder (and we need to define a new \".gn\" in that folder too). \n\nI think this CL should do nothing more than \"just exposing a way to designate the `root` variable in `.gn` from command line, to avoid modifying the `.gn` file if we want to define/change `root` variable\". So the effect should be exactly the same as defining a same `root` variable in `.gn`. In this sense I think \"--root\" and the new flag can be used together.\n\nThanks again!",
      "parentUuid": "d08889fa_62259c01",
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0172876_feaeb5c0",
        "filename": "src/gn/switches.cc",
        "patchSetId": 4
      },
      "lineNbr": 178,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-10-15T01:03:43Z",
      "side": 1,
      "message": "The existing switches use hyphens so we should be consistent.",
      "range": {
        "startLine": 178,
        "startChar": 34,
        "endLine": 178,
        "endChar": 53
      },
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fac2f049_99864dbf",
        "filename": "src/gn/switches.cc",
        "patchSetId": 4
      },
      "lineNbr": 178,
      "author": {
        "id": 1000803
      },
      "writtenOn": "2020-10-15T01:38:52Z",
      "side": 1,
      "message": "Sorry that I should have used hyphens, thanks for pointing this out!",
      "parentUuid": "c0172876_feaeb5c0",
      "range": {
        "startLine": 178,
        "startChar": 34,
        "endLine": 178,
        "endChar": 53
      },
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9390b23_fd710fe8",
        "filename": "src/gn/switches.cc",
        "patchSetId": 4
      },
      "lineNbr": 180,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-10-15T01:03:43Z",
      "side": 1,
      "message": "We should avoid the term \"source root\" which is the name of the \"//\" directory. Probably just stick with \"root build file\" like the flag name as in other places.",
      "range": {
        "startLine": 180,
        "startChar": 47,
        "endLine": 180,
        "endChar": 58
      },
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2eaf4f7_6574639c",
        "filename": "src/gn/switches.cc",
        "patchSetId": 4
      },
      "lineNbr": 180,
      "author": {
        "id": 1000803
      },
      "writtenOn": "2020-10-15T01:38:52Z",
      "side": 1,
      "message": "Good point, modified as suggested (I change it to \"build file DIR\" because it must be a folder not the specific BUILD.gn file). Thanks",
      "parentUuid": "b9390b23_fd710fe8",
      "range": {
        "startLine": 180,
        "startChar": 47,
        "endLine": 180,
        "endChar": 58
      },
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e7be7c8_56c12448",
        "filename": "src/gn/switches.cc",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-10-15T01:03:43Z",
      "side": 1,
      "message": "Here is a suggested rewording of the help. See the patch-level comment I have about the behavior also:\n\nNormally the first build file loaded by GN will be \"//BUILD.gn\". This option allows specifying a different directory for the initial build file. The value is a GN-style path taken as relative to the current working directory.\n\nSpecifying a different initial BUILD.gn file does not change the meaning of the source root (the \"//\" directory) which can be independently set via the --root switch. It also does not prevent the build file located at \"//BUILD.gn\" from being loaded if a target in the build references that directory.\n\nOne use-case of this feature is to load a different set of initial targets from project that uses GN without modifying any files.",
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ece8c896_3500f8c7",
        "filename": "src/gn/switches.cc",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1000803
      },
      "writtenOn": "2020-10-15T01:38:52Z",
      "side": 1,
      "message": "Thanks! This is indeed much better. I have updated the message accordingly. And I have added another sentence \"This option will overwrite the `root` variable defined in `.gn`.\".",
      "parentUuid": "5e7be7c8_56c12448",
      "revId": "e61b025f7a8091ee896a53287c71837ff5ee5007",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ]
}
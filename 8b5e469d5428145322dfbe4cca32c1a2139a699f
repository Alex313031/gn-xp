{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4417b6a0_47ca255a",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 152,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2024-02-08T11:44:42Z",
      "side": 1,
      "message": "You probably want to handle Cygwin and MSys2 here as well which may return different values. See https://github.com/git-for-windows/msys2-runtime/blob/main/winsup/cygwin/uname.cc\n\nOr maybe consider os.name which might be more predictable.",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06eb6c39_f5b183c2",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 152,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-08T12:03:38Z",
      "side": 1,
      "message": "I intended to ignore mingw \u0026 msys because they eventually use a unix shell, which shoule be same with linux. The only shell we want to bypass is cmd/pwsh single quote if I understand correctly.",
      "parentUuid": "4417b6a0_47ca255a",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c20857c7_7a568104",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 152,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-10T04:37:20Z",
      "side": 1,
      "message": "I think use shlex.quote is not a good idea because single quote is not supported in windows, and I have no idea why, python don\u0027t double quote in all platforms as all shells supports double quotes. I\u0027m not gonna change this, probably someone should fix this in another CL later.",
      "parentUuid": "06eb6c39_f5b183c2",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2462f63_ab49fa6c",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 152,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2024-02-13T06:40:09Z",
      "side": 1,
      "message": "\u003e I intended to ignore mingw \u0026 msys because they eventually use a unix shell\n\nI think ninja binary for Windows doesn\u0027t use unix shell to run the command returned from this function.",
      "parentUuid": "c20857c7_7a568104",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92799863_3e0977ba",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 152,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-13T10:33:38Z",
      "side": 1,
      "message": "If the user runs `python build/gen.py` in cmd/pwsh, they probably use same shell to ninja and generates a exe as output. So if the user is in mingw/msys2 to generate the ninja files, they probably are building in a linux shell and want a linux binary.\nSo I think it is correct here to use `platform.system` and only make change for \"Windows\"?",
      "parentUuid": "c2462f63_ab49fa6c",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "323a7316_bca11785",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 152,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-13T14:50:24Z",
      "side": 1,
      "message": "I think I\u0027m right, this function is for generating a regenerating ninja files shell command, and if we run python in mingw/msys, the user would have no reason to use a different shell, so the ninja will run the command in a unix shell, which supports single quote. The only situation need to fix is we run this python and ninja in cmd/pwsh.",
      "parentUuid": "92799863_3e0977ba",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82d5af82_46736392",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 533,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2024-02-08T11:44:42Z",
      "side": 1,
      "message": "Please add corresponding link commands for mingw and msys if possible (also see comment below about runtime detection).",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c52a2ee5_41cdc8dc",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 533,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-08T12:03:38Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "82d5af82_46736392",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b5f94a1_04ff1b42",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 533,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-10T04:37:20Z",
      "side": 1,
      "message": "I don\u0027t think we need to handle mingw/msys because they are intended to use a linux style shell or compiler, and these flags can only be handled msvc. In fact there\u0027re something above to handle msys/mingw. I don\u0027t know any way to detect whether user will use msvc under msys/mingw. And I don\u0027t think a manifest is needed to use in msys/mingw. In fact, WSL2 supports long path by default, so this job might needed to be done in the shell side.",
      "parentUuid": "c52a2ee5_41cdc8dc",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "161f4469_24094dea",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 533,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2024-02-13T12:08:31Z",
      "side": 1,
      "message": "It is not about the shell being used when running this script. The generated binary should support long paths even if generated by mingw on either Cygwin or MSys, since it could be used with a different shell later.",
      "parentUuid": "9b5f94a1_04ff1b42",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40fba665_f34c3293",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 533,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-13T14:25:15Z",
      "side": 1,
      "message": "mingw/cygwin/msys doesn\u0027t use MSVC and thus gcc/clang cannot (easily) link the windows manifest file. \nAnyway, it is not a degration for mingw/cygwin to not supporting long path by this patch, and no one is using a mingw compiled gn.exe anyway, what\u0027s the point if so? Why not directly compile and use in a pure windows environment?\nI think we can leave it to anyone who is being blocked by it in the future.",
      "parentUuid": "161f4469_24094dea",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83ae9500_8e369eab",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 533,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2024-02-13T14:31:50Z",
      "side": 1,
      "message": "My understanding is that MSys provides a Posix-like shell, but the mingw toolchain still generates pure Win32 binaries that can work anywhere.\n\nUnlike Cygwin whose toolchain generates binaries that require the Cygwin DLL available (and are super slow to properly emulate all of Posix, or nearly all of it). It is also possible to use mingw from Cygwin, but this is probably not something to support here.",
      "parentUuid": "40fba665_f34c3293",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "becc71a0_7700cbeb",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 533,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-13T14:50:24Z",
      "side": 1,
      "message": "I understand what you mean, but I really don\u0027t think anyone would compile gn.exe in mingw/msys while we can natively compile with MSVC. \nAt my first glance we need to add a resource file to link the manifest,rc,exe together, to opt-in longpath to a mingw windows executable.",
      "parentUuid": "83ae9500_8e369eab",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ee3ace2_daea17b7",
        "filename": "build/gen.py",
        "patchSetId": 25
      },
      "lineNbr": 533,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-13T15:09:09Z",
      "side": 1,
      "message": "gen.py does not even works on my msys2 mingw64:\n\n```\n*** MINGW64 /d/cef/gn-mingw\n$ python\nPython 3.11.4 (main, Jul 13 2023, 20:17:04) [GCC 11.3.0] on cygwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\u003e\u003e\u003e import platform\n\u003e\u003e\u003e platform.system()\n\u0027MINGW64_NT-10.0-22631\u0027\n\u003e\u003e\u003e import sys\n\u003e\u003e\u003e sys.platform\n\u0027cygwin\u0027\n\n```\n\nCan we implement this later and in a separate CL?",
      "parentUuid": "becc71a0_7700cbeb",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6d3baef_5557f969",
        "filename": "src/gn/file_writer_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 60,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2024-02-08T14:25:23Z",
      "side": 1,
      "message": "nit: Use EXPECT_GT() here to print the value of file_path.value().size() in case of expectation failure.",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75095ee8_55689480",
        "filename": "src/gn/file_writer_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 60,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-10T04:37:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6d3baef_5557f969",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52a57be5_5506b652",
        "filename": "src/gn/file_writer_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 60,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-10T04:37:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6d3baef_5557f969",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68dca2ff_726dcc31",
        "filename": "src/util/sys_info.cc",
        "patchSetId": 25
      },
      "lineNbr": 21,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2024-02-08T11:44:42Z",
      "side": 1,
      "message": "nit: Can you rename this to `AreLongPathsSupported()` or `IsLongPathSupportEnabled()` instead?",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e9abc16_b139452b",
        "filename": "src/util/sys_info.cc",
        "patchSetId": 25
      },
      "lineNbr": 21,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-08T12:03:38Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "68dca2ff_726dcc31",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a776036c_ccc46854",
        "filename": "src/util/sys_info.cc",
        "patchSetId": 25
      },
      "lineNbr": 21,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-10T04:37:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e9abc16_b139452b",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5152d77e_3658edfe",
        "filename": "src/util/sys_info.cc",
        "patchSetId": 25
      },
      "lineNbr": 24,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2024-02-08T11:44:42Z",
      "side": 1,
      "message": "static local variable are already protected against multi-thread access. Using std::once_flag and std::call_once only makes sense for truly global variables.\n\nI recommand using a static local class instance instead to achieve the same result, as in:\n\n```\nstatic bool AreLongPathsSupported() {\n  struct LongPathSupport {\n    LongPathSupport() {\n      ...\n      if (...)\n        supported \u003d true;\n    }\n\n    bool supported \u003d false;\n  };\n\n  static LongPathSupport s_long_paths;  // constructed lazily\n  return s_long_paths.supported;\n}\n```\n\nAnother issue here is that checking the registry does not tell you if the _current_ process supports long paths (it will not it the manifest is not linked properly, as if building with mingw or msys with the current CL). Unfortunately, the only reliable way to do that is to call the RtlAreLongPathsEnabled() function from ntdll.dll.\n\nFor example, Ninja uses the following code:\n\n```\nbool AreWin32LongPathsEnabled() {\n  // Probe ntdll.dll for RtlAreLongPathsEnabled, and call it if it exists.\n  bool result \u003d false;\n  HINSTANCE ntdll_lib \u003d ::GetModuleHandleW(L\"ntdll\");\n  if (ntdll_lib) {\n    typedef BOOLEAN(WINAPI FunctionType)();\n    auto* func_ptr \u003d reinterpret_cast\u003cFunctionType*\u003e(\n        ::GetProcAddress(ntdll_lib, \"RtlAreLongPathsEnabled\"));\n    if (func_ptr) {\n      result \u003d (*func_ptr)();\n    }\n  }\n  return result;\n}\n```",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f84a0938_43cf6c86",
        "filename": "src/util/sys_info.cc",
        "patchSetId": 25
      },
      "lineNbr": 24,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-08T12:03:38Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "5152d77e_3658edfe",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "219c1ce5_62cead10",
        "filename": "src/util/sys_info.cc",
        "patchSetId": 25
      },
      "lineNbr": 24,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-10T04:37:20Z",
      "side": 1,
      "message": "Like I said, msys/mingw long path support should be opt-in by shell.",
      "parentUuid": "f84a0938_43cf6c86",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94831ebd_c1fd6f61",
        "filename": "src/util/sys_info.cc",
        "patchSetId": 25
      },
      "lineNbr": 24,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2024-02-10T04:37:20Z",
      "side": 1,
      "message": "reito@Reito MINGW64 /d/test/testtest\n$ mkdir testtesttesttest\n\nreito@Reito MINGW64 /d/test/testtest\n$ cd testtesttesttest/\n\nreito@Reito MINGW64 /d/test/testtest/testtesttesttest\n$ touch 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456890123456789012345678901\n\nreito@Reito MINGW64 /d/test/testtest/testtesttesttest\n$ ls\n123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456890123456789012345678901\n\nLike I said, msys/mingw\u0027s long path support should be opt-in by the shell itself, just like WSL2.",
      "parentUuid": "f84a0938_43cf6c86",
      "revId": "8b5e469d5428145322dfbe4cca32c1a2139a699f",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ]
}
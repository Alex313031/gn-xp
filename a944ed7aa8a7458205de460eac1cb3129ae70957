{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "17330cd1_5d4bf28a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2022-04-25T19:55:26Z",
      "side": 1,
      "message": "This is breaking compilation on Mac, with:\n```\n4.478s [38(+18)/291(+236)] CXX src/gn/analyzer.o\nFAILED: src/gn/analyzer.o \nclang++ -MMD -MF src/gn/analyzer.o.d -I../src -I. -DNDEBUG -O3 -fdata-sections -ffunction-sections -D_FILE_OFFSET_BITS\u003d64 -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -pthread -pipe -fno-exceptions -fno-rtti -fdiagnostics-color -Werror -Wall -Wextra -Wno-unused-parameter -Wundef -std\u003dc++17 -mmacosx-version-min\u003d10.9 -c ../src/gn/analyzer.cc -o src/gn/analyzer.o\n../src/gn/analyzer.cc:186:20: error: loop variable \u0027kv\u0027 is always a copy because the range of type \u0027base::Value::const_dict_iterator_proxy\u0027 (aka \u0027base::detail::const_dict_iterator_proxy\u0027) does not return a reference [-Werror,-Wrange-loop-analysis]\n  for (const auto\u0026 kv : dict-\u003eDictItems()) {\n                   ^\n../src/gn/analyzer.cc:186:8: note: use non-reference type \u0027std::__1::pair\u003cconst std::__1::basic_string\u003cchar\u003e \u0026, const base::Value \u0026\u003e\u0027\n  for (const auto\u0026 kv : dict-\u003eDictItems()) {\n       ^~~~~~~~~~~~~~~~\n1 error generated.\n```",
      "revId": "a944ed7aa8a7458205de460eac1cb3129ae70957",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6110830_db0e83ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-04-25T20:18:30Z",
      "side": 1,
      "message": "I wonder how this passed CQ? Which version of Clang are you using? I believe the LUCI recipe uses a pretty recent version similar to the one used by Fuchsia prebuilts. Are you using an older Clang toolchain? Otherwise, it looks like `-Wno-range-loop-analysis` should be added, or the source code should be fixed.",
      "parentUuid": "17330cd1_5d4bf28a",
      "revId": "a944ed7aa8a7458205de460eac1cb3129ae70957",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ad1694a_b34ae5fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-04-26T03:08:31Z",
      "side": 1,
      "message": "made https://gn-review.googlesource.com/c/gn/+/13800",
      "parentUuid": "d6110830_db0e83ea",
      "revId": "a944ed7aa8a7458205de460eac1cb3129ae70957",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceda976f_2dae6ef5",
        "filename": "src/base/compiler_specific.h",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-04-25T10:34:01Z",
      "side": 1,
      "message": "For context, see comment after this one. Note: this works here because COMPILER_GCC and COMPILER_MSVC are defined in util/build_config.h and are not supposed to be defined on the command line. Since this is subtle, can you add a comment or just use the equivalent definition, e.g.:\n\n```\n#if (defined(COMPILER_GCC) \u0026\u0026 COMPILER_GCC \u0026\u0026 defined(NDEBUG)\n...\n#elif defined(COMPILER_MSVC) \u0026\u0026 COMPILER_MSVC \u0026\u0026 defined(NDEBUG)\n...\n```",
      "revId": "a944ed7aa8a7458205de460eac1cb3129ae70957",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00710991_8d047d38",
        "filename": "src/base/compiler_specific.h",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-04-25T11:44:56Z",
      "side": 1,
      "message": "made https://gn-review.googlesource.com/c/gn/+/13783",
      "parentUuid": "ceda976f_2dae6ef5",
      "revId": "a944ed7aa8a7458205de460eac1cb3129ae70957",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1318376_0908b23f",
        "filename": "src/base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 610,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-04-25T10:34:01Z",
      "side": 1,
      "message": "aaragh, I\u0027m sorry, but this is not equivalent. Using -DCHECK_IS_CONFIGURABLE\u003d0 on the command line will not result in the same pre-processed output, this should be instead replaced with:\n\n```\n#if defined(DCHECK_IS_CONFIGURABLE) \u0026\u0026 DCHECK_IS_CONFIGURABLE\n```",
      "revId": "a944ed7aa8a7458205de460eac1cb3129ae70957",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32c3c7b4_cea06d3d",
        "filename": "src/base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 610,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-04-25T11:44:56Z",
      "side": 1,
      "message": "made https://gn-review.googlesource.com/c/gn/+/13783",
      "parentUuid": "d1318376_0908b23f",
      "revId": "a944ed7aa8a7458205de460eac1cb3129ae70957",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ]
}
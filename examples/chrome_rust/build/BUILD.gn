toolchain("rust") {
  clang_dir = "/home/bwb/fuchsia/prebuilt/third_party/clang/linux-x64/bin/"
  tool("rust_bin") {
    depfile = "{{target_out_dir}}/{{crate_name}}.d"
    outfile = "{{target_out_dir}}/{{crate_name}}"
    command = "rustc --crate-name {{crate_name}} {{source}} --crate-type {{crate_type}} --emit=dep-info=$depfile,link -Z dep-info-omit-d-target {{rustflags}} -o $outfile {{rustdeps}} {{externs}}"
    description = "RUST $outfile"
    outputs = [ outfile ]
  }

  tool("rust_staticlib") {
    depfile = "{{target_out_dir}}/{{crate_name}}.d"
    outfile = "{{target_out_dir}}/{{crate_name}}.a"
    command = "rustc --crate-name {{crate_name}} {{source}} --crate-type {{crate_type}} --emit=dep-info=$depfile,link -Z dep-info-omit-d-target {{rustflags}} -o $outfile {{rustdeps}} {{externs}}"
    description = "RUST $outfile"
    outputs = [ outfile ]
  }

  tool("rust_rlib") {
    depfile = "{{target_out_dir}}/{{crate_name}}.d"
    outfile = "{{target_out_dir}}/lib{{crate_name}}.rlib"
    command = "rustc --crate-name {{crate_name}} {{source}} --crate-type {{crate_type}} --emit=dep-info=$depfile,link -Z dep-info-omit-d-target {{rustflags}} -o $outfile {{rustdeps}} {{externs}}"
    description = "RUST $outfile"
    outputs = [ outfile ]
  }

  tool("rust_cdylib") {
    depfile = "{{target_out_dir}}/{{crate_name}}.d"
    outfile = "{{target_out_dir}}/lib{{crate_name}}.so"
    command = "rustc --crate-name {{crate_name}} {{source}} --crate-type {{crate_type}} --emit=dep-info=$depfile,link -Z dep-info-omit-d-target {{rustflags}} -o $outfile {{rustdeps}} {{externs}}"
    description = "RUST $outfile"
    outputs = [ outfile ]
  }

  tool("cc") {
    depfile = "{{output}}.d"
    command = "gcc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "CC {{output}}"
    outputs =
        [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
  }

  tool("cxx") {
    depfile = "{{output}}.d"
    command = "$clang_dir/clang++ -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "CXX {{output}}"
    outputs =
        [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
  }

  tool("alink") {
    rspfile = "{{output}}.rsp"
    command = "rm -f {{output}} && llvm-ar rcsD {{output}} @$rspfile"
    description = "AR {{target_output_name}}{{output_extension}}"
    rspfile_content = "{{inputs}}"
    outputs =
        [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_extension = ".a"
    output_prefix = "lib"
  }

  tool("solink") {
    soname = "{{target_output_name}}{{output_extension}}"  # e.g. "libfoo.so".
    sofile = "{{output_dir}}/$soname"
    tocfile = "{{output_dir}}/$soname.TOC"
    rspfile = soname + ".rsp"

    command = "$clang_dir/clang++ -shared {{ldflags}} -o $sofile -Wl,-soname=$soname @$rspfile && echo boo > $tocfile"
    rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}}"

    description = "SOLINK $soname"

    # Use this for {{output_extension}} expansions unless a target manually
    # overrides it (in which case {{output_extension}} will be what the target
    # specifies).
    default_output_extension = ".so"

    # Use this for {{output_dir}} expansions unless a target manually overrides
    # it (in which case {{output_dir}} will be what the target specifies).
    default_output_dir = "{{root_out_dir}}"

    outputs = [
      sofile,
      tocfile,
    ]
    link_output = sofile
    depend_output = tocfile
    output_prefix = "lib"
  }

  tool("link") {
    outfile = "{{target_output_name}}{{output_extension}}"
    rspfile = "$outfile.rsp"
    command = "$clang_dir/clang++ {{ldflags}} -o $outfile -Wl,--start-group @$rspfile {{solibs}} -Wl,--end-group -lpthread -ldl {{libs}}"
    description = "LINK $outfile"
    default_output_dir = "{{root_out_dir}}"
    rspfile_content = "{{inputs}}"
    outputs = [ outfile ]
  }

  tool("stamp") {
    command = "touch {{output}}"
    description = "STAMP {{output}}"
  }

  tool("copy") {
    command = "cp -af {{source}} {{output}}"
    description = "COPY {{source}} {{output}}"
  }
}

config("rust_defaults") {
  rustflags = [
    "-Cdebuginfo=2",
    "-Copt-level=s",
    "-Cpanic=abort",
    "-Coverflow-checks=on",
    "-Zpanic_abort_tests",
  ]
}

config("lto") {
  cflags = [
    "-flto",
    "-fwhole-program-vtables",
  ]
  ldflags = [
    "-flto",
    "-fwhole-program-vtables",
  ]
  rustflags = [ "-Clinker-plugin-lto" ]
}

config("compiler_defaults") {
  if (current_os == "linux") {
    cflags = [
      "-fPIC",
      "-pthread",
    ]

    ldflags = [
      "-Wl,-rpath=\$ORIGIN/",
      "-Wl,-rpath-link=",
    ]
  }
}

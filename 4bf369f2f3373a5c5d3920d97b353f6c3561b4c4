{
  "comments": [
    {
      "key": {
        "uuid": "70985e97_3f307c06",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-08-05T23:50:29Z",
      "side": 1,
      "message": "Docs seem a bit scant.  Is it the intent that `tool(\"cxx_module\")` is like `tool(\"cxx\")` in all ways except that it handles a different input file extension?\n\nWhat are the semantics for a target that includes `.modulemap` and other kinds of files in a `sources` list?  More generally, what are the semantics of a `.modulemap` input file as a target output?  i.e., `.cc` et al turn into `.o` and that goes into the `{{inputs}}` list for dependent linking targets.  `.modulemap` turns into a `.pcm`, but what does that mean to dependents of the target that did that compilation?",
      "revId": "4bf369f2f3373a5c5d3920d97b353f6c3561b4c4",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8ee25f4_dbabd45a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2020-08-05T23:38:12Z",
      "side": 1,
      "message": "Hi, this is my attempt at coming up with a (very) stripped down version of Petr\u0027s work in https://gn-review.googlesource.com/c/gn/+/7401 so that we can get something landed that\u0027s not too much of an investment and get to try out modules in Fuchsia\u0027s build.\n\nThe main simplifications are:\n1) .modulemap files (which define the module\u0027s public API) have to be written by hand\n2) only C++ is supported (i.e. not C, ObjC, ObjC++)\n\nThis first small CL adds support for .modulemap in \"sources\" which are compiled (to .pcm) by a \"cxx_module\" tool that\u0027s expected to exist.\n\nThe second CL adds support for \"module_deps\", which is like \"deps\" but also builds a helper cflags_cc ninja variable to depend on other module targets.\n\nI believe these two would be sufficient to start incrementally working on modules in the Fuchsia build based on experiments here: https://fuchsia-review.googlesource.com/c/fuchsia/+/412605\n\nDoes this seem OK? I thought I would send it out for a look before I write up a bunch of boilerplate in unittests. (Let me know if I can help walk you through the module building flags, they\u0027re a bit futzy/underdocumented if you\u0027re not familiar with them.)",
      "revId": "4bf369f2f3373a5c5d3920d97b353f6c3561b4c4",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cf1c56c_650c1d45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-08-05T23:44:22Z",
      "side": 1,
      "message": "I like this split, even long-term.  When we add automagic modulemap generation, that can be `generated_file() { output_conversion \u003d \"modulemap\" }` or something, and then using generated module maps would just be normal use of a `sources \u003d [ \"$target_gen_dir/$output_name.modulemap\" ]` with deps on the generator target.",
      "parentUuid": "b8ee25f4_dbabd45a",
      "revId": "4bf369f2f3373a5c5d3920d97b353f6c3561b4c4",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e1f5437_726a3f3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-05T23:51:04Z",
      "side": 1,
      "message": "That looks good to me, thanks for working on this. I think that we\u0027re probably going to need support for C, if anything to build the module for libc. It\u0027s also not clear to me if we really need module_deps, but we can discuss that separately.",
      "parentUuid": "8cf1c56c_650c1d45",
      "revId": "4bf369f2f3373a5c5d3920d97b353f6c3561b4c4",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fc18a02f_d9a03b72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2022-10-26T17:59:19Z",
      "side": 1,
      "message": "Brett, if this looks good to you, can you +2?",
      "revId": "857b5592193f8b5006e9e0b04da86ae840febfb8",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9e4360b_72fa7036",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2022-10-26T18:07:23Z",
      "side": 1,
      "message": "Oh sorry!",
      "revId": "857b5592193f8b5006e9e0b04da86ae840febfb8",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c55a550c_daafeb13",
        "filename": "src/gn/settings.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2022-10-20T21:09:00Z",
      "side": 1,
      "message": "I noticed that this particular class has a different style (lower_snake_case) instead of the CamelCase that\u0027s used elsewhere in GN.\n\nIs the convention to follow the rest of the file, or to start to switch over to CamelCase?",
      "revId": "857b5592193f8b5006e9e0b04da86ae840febfb8",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7af377f9_e9229fcc",
        "filename": "src/gn/settings.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2022-10-20T21:34:52Z",
      "side": 1,
      "message": "According to Google style, simple inlined getters and setters use snake_case, while other functions use CamelCase. See https://google.github.io/styleguide/cppguide.html#Function_Names\n(GN interprets \"may be named like variables\" to be \"should...\" for consistency; the Google style guide has changed over time).",
      "parentUuid": "c55a550c_daafeb13",
      "revId": "857b5592193f8b5006e9e0b04da86ae840febfb8",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ccbf094_820ad94f",
        "filename": "src/gn/settings.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2022-10-20T22:36:09Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "7af377f9_e9229fcc",
      "revId": "857b5592193f8b5006e9e0b04da86ae840febfb8",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8400da99_6129a6b7",
        "filename": "src/gn/settings.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2022-10-21T17:37:32Z",
      "side": 1,
      "message": "Can this take `const Label\u0026` as the initializer list type? I notice where you use this you need `\u0026` all over the place which I think should be unnecessary.",
      "parentUuid": "2ccbf094_820ad94f",
      "revId": "857b5592193f8b5006e9e0b04da86ae840febfb8",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98bdda66_6ab5cb1b",
        "filename": "src/gn/settings.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2022-10-21T19:43:17Z",
      "side": 1,
      "message": "(reopening)",
      "parentUuid": "8400da99_6129a6b7",
      "revId": "857b5592193f8b5006e9e0b04da86ae840febfb8",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd0fb302_749c12ba",
        "filename": "src/gn/settings.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2022-10-21T22:43:36Z",
      "side": 1,
      "message": "std::initializer_list can\u0027t be a list of refs:\n\n```\n error: \u0027__begin_\u0027 declared as a pointer to a reference of type \u0027const Label \u0026\u0027\n    const _Ep* __begin_;\n             ^\n../src/gn/settings.cc:32:41: note: in instantiation of template class \u0027std::initializer_list\u003cconst Label \u0026\u003e\u0027 requested here\n    std::initializer_list\u003cconst Label\u0026\u003e labels) const {\n```\n\nI guess we could say the case as rare enough to use a copy-constructor?, and use `std::initializer_list\u003cconst Label\u003e`?",
      "parentUuid": "98bdda66_6ab5cb1b",
      "revId": "857b5592193f8b5006e9e0b04da86ae840febfb8",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "758ae951_e33ea106",
        "filename": "src/gn/settings.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2022-10-21T22:53:41Z",
      "side": 1,
      "message": "Oh, that\u0027s unfortunate. I guess let\u0027s keep the pointers. I think this is definitely rare enough to do copies, but I\u0027m worried somebody will start using it for \"real\" output in the future which would be bad.",
      "parentUuid": "fd0fb302_749c12ba",
      "revId": "857b5592193f8b5006e9e0b04da86ae840febfb8",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92abffe0_6e57d3e5",
        "filename": "src/gn/settings.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2022-10-21T23:08:29Z",
      "side": 1,
      "message": "ack.",
      "parentUuid": "758ae951_e33ea106",
      "revId": "857b5592193f8b5006e9e0b04da86ae840febfb8",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "857b5592193f8b5006e9e0b04da86ae840febfb8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "284afb84_79b48fd1",
        "filename": "src/gn/ninja_c_binary_target_writer.cc",
        "patchSetId": 36
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-07T23:13:55Z",
      "side": 1,
      "message": "We might also consider using -fmodules-embed-all-files to embed all modulemap files into the pcm files and avoid these flags, see https://github.com/llvm/llvm-project/commit/919ce235665865029d754d9b18fad5d0084aaef1.\n\nThat commit explicitly mentions distributed compilation support which reminds me that we should also check which of these flags are supported by Goma.",
      "range": {
        "startLine": 72,
        "startChar": 29,
        "endLine": 72,
        "endChar": 47
      },
      "revId": "8d4c31f39d4e3cc0273529f0e4188684eafd4379",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fdf615e_fa430761",
        "filename": "src/gn/ninja_c_binary_target_writer.cc",
        "patchSetId": 36
      },
      "lineNbr": 72,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2020-08-08T00:05:44Z",
      "side": 1,
      "message": "I can change to that if you think it\u0027s better or better supported. So that means we would:\n- never use -fmodule-map-file\n- use -fmodules-embed-all-files and -fmodule-file when compiling the modulemap to pcm\n- dependents only need -fmodule-file, and they pull the modulemap out of the .pcm\n\nIs that your understanding?",
      "parentUuid": "284afb84_79b48fd1",
      "range": {
        "startLine": 72,
        "startChar": 29,
        "endLine": 72,
        "endChar": 47
      },
      "revId": "8d4c31f39d4e3cc0273529f0e4188684eafd4379",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d7158d2_c968806a",
        "filename": "src/gn/ninja_c_binary_target_writer.cc",
        "patchSetId": 36
      },
      "lineNbr": 72,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2020-08-08T00:12:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1fdf615e_fa430761",
      "range": {
        "startLine": 72,
        "startChar": 29,
        "endLine": 72,
        "endChar": 47
      },
      "revId": "8d4c31f39d4e3cc0273529f0e4188684eafd4379",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03c4ecb6_9b0d9721",
        "filename": "src/gn/ninja_c_binary_target_writer.cc",
        "patchSetId": 36
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-08T00:27:27Z",
      "side": 1,
      "message": "That\u0027s my understanding, but we should also confirm that.",
      "parentUuid": "3d7158d2_c968806a",
      "range": {
        "startLine": 72,
        "startChar": 29,
        "endLine": 72,
        "endChar": 47
      },
      "revId": "8d4c31f39d4e3cc0273529f0e4188684eafd4379",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28011a99_85071c6d",
        "filename": "src/gn/ninja_c_binary_target_writer.cc",
        "patchSetId": 36
      },
      "lineNbr": 75,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-07T23:13:55Z",
      "side": 1,
      "message": "Would it make sense to have user provide flags as `module_file_switch \u003d \"-fmodule-file\"` (akin to lib_switch and lib_dir_switch) to avoid hardcoding these files into GN?",
      "range": {
        "startLine": 75,
        "startChar": 29,
        "endLine": 75,
        "endChar": 43
      },
      "revId": "8d4c31f39d4e3cc0273529f0e4188684eafd4379",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73bec662_9a6fa6c5",
        "filename": "src/gn/ninja_c_binary_target_writer.cc",
        "patchSetId": 36
      },
      "lineNbr": 75,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2020-08-08T00:05:44Z",
      "side": 1,
      "message": "Yeah, I figured we could do that later if we wanted it, but it could make sense to make it configurable in the same way.\n\n-fmodule-file is a bit tricky though since the value itself is \"\u003cname\u003e\u003d\u003cpcm\u003e\", not just the name of a plain file or plain name or something, so it seemed less likely that another compiler would have an option just like that and not call it the same thing.",
      "parentUuid": "28011a99_85071c6d",
      "range": {
        "startLine": 75,
        "startChar": 29,
        "endLine": 75,
        "endChar": 43
      },
      "revId": "8d4c31f39d4e3cc0273529f0e4188684eafd4379",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c0b41d3_028995cc",
        "filename": "src/gn/ninja_c_binary_target_writer.cc",
        "patchSetId": 36
      },
      "lineNbr": 75,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-08T00:27:27Z",
      "side": 1,
      "message": "The `\u003cname\u003e\u003d` part is optional, it\u0027s just an optimization. When you provide it, Clang will know that if it encounters module \u003cname\u003e, it has to load \u003cpcm\u003e, otherwise it just always has to load the module to figure out what\u0027s inside of it.",
      "parentUuid": "73bec662_9a6fa6c5",
      "range": {
        "startLine": 75,
        "startChar": 29,
        "endLine": 75,
        "endChar": 43
      },
      "revId": "8d4c31f39d4e3cc0273529f0e4188684eafd4379",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    }
  ]
}
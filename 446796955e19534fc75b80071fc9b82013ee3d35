{
  "comments": [
    {
      "key": {
        "uuid": "7c12e2a8_e1c83674",
        "filename": "src/gn/ninja_build_writer.cc",
        "patchSetId": 10
      },
      "lineNbr": 610,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-09-02T18:14:50Z",
      "side": 1,
      "message": "This is probably not the right thing to do here. If the user specifies a default target that has no dependency_output_file, we probably still want to output a rule. Perhaps it would be best to just emit the phony target anyways even if it is always dirty? Ie:\n\n  const OutputFile\u0026 output_file \u003d bool(default_target-\u003edependency_output_file()) \n      ? default_target-\u003edependency_output_file() \n      : default_target-\u003edependency_output_phony();",
      "range": {
        "startLine": 610,
        "startChar": 11,
        "endLine": 610,
        "endChar": 56
      },
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1521467e_79d781c2",
        "filename": "src/gn/ninja_build_writer.cc",
        "patchSetId": 10
      },
      "lineNbr": 610,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-02T19:21:44Z",
      "side": 1,
      "message": "Yes, default is a special case where we want always emit the the phony target.",
      "parentUuid": "7c12e2a8_e1c83674",
      "range": {
        "startLine": 610,
        "startChar": 11,
        "endLine": 610,
        "endChar": 56
      },
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "285f29aa_f46b70e1",
        "filename": "src/gn/ninja_build_writer.cc",
        "patchSetId": 10
      },
      "lineNbr": 610,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-09-03T18:33:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1521467e_79d781c2",
      "range": {
        "startLine": 610,
        "startChar": 11,
        "endLine": 610,
        "endChar": 56
      },
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "035e44fa_a5a49f8f",
        "filename": "src/gn/ninja_build_writer.cc",
        "patchSetId": 10
      },
      "lineNbr": 624,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-09-02T18:14:50Z",
      "side": 1,
      "message": "This is another spot where we might want to print the phony target anyways.",
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d181b793_359cc3a6",
        "filename": "src/gn/ninja_build_writer.cc",
        "patchSetId": 10
      },
      "lineNbr": 624,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-02T19:21:44Z",
      "side": 1,
      "message": "Agreed.",
      "parentUuid": "035e44fa_a5a49f8f",
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b92d1e0_d7ff33bf",
        "filename": "src/gn/ninja_build_writer.cc",
        "patchSetId": 10
      },
      "lineNbr": 624,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-09-03T18:33:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d181b793_359cc3a6",
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c201bbd4_af486528",
        "filename": "src/gn/target.cc",
        "patchSetId": 10
      },
      "lineNbr": 827,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-02T19:21:44Z",
      "side": 1,
      "message": "I\u0027d prefer to omit the .phony extension and improve the logic that generates build.ninja to omit top-level phony targets that aren\u0027t needed because they\u0027ve been already generated elsewhere.",
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bab08ff0_5a19f713",
        "filename": "src/gn/target.cc",
        "patchSetId": 10
      },
      "lineNbr": 827,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-09-03T18:33:14Z",
      "side": 1,
      "message": "It looks like I misunderstood the issue I ran into. It wasn\u0027t an issue with the top level phony, but rather an output name collision between two different GN targets. The issue manifested after I also switched groups to use phony rules. Specifically, in Fuchsia\u0027s ZN build, the zx_host_tool template generates two targets: a group(\"\u003ctarget_name\u003e\") and an executable(\"\u003ctarget_name\u003e._build\"). The problem was that the executable target created an output name that matched \u003ctarget_name\u003e. The .stamp suffix on groups had prevented this being an error.\n\nAt Roland\u0027s suggestion, I removed the .phony extension and added a \"BuildDirType::PHONY\" instead. So instead of targets being generated as \"obj/foo/bar\", they\u0027ll be \"phony/foo/bar\". It removes possible conflicts with real outputs, but it does mean we\u0027re reserving that directory name.",
      "parentUuid": "c201bbd4_af486528",
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32249821_6b8dd98b",
        "filename": "src/gn/target.cc",
        "patchSetId": 10
      },
      "lineNbr": 827,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-09-11T21:38:52Z",
      "side": 1,
      "message": "The top-level phony targets are still in place so that users can still do \"ninja \u003cgn_target\u003e\" for all GN targets. In the case where they need to be omitted, we just have an empty phony target like:\n\n  build some_gn_target: phony",
      "parentUuid": "bab08ff0_5a19f713",
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3b9570c_3a355be6",
        "filename": "src/gn/target.h",
        "patchSetId": 10
      },
      "lineNbr": 509,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-02T19:21:44Z",
      "side": 1,
      "message": "Have you considered changing the type to std::optional\u003cOutputFile\u003e and omitting both the bool conversion as well as dependency_output_phony(), the logic to populate dependency_output_phony_ would be moved to WritePhonyForTarget which is the only place where it\u0027s used right now.",
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2672f3d_baaeb10c",
        "filename": "src/gn/target.h",
        "patchSetId": 10
      },
      "lineNbr": 509,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-09-02T19:43:13Z",
      "side": 1,
      "message": "std::optional would be my preference, but I assumed GN was on C++14 like Chromium. Now I see that it is on 17 (and even has other uses of std::optional), I\u0027ll switch to that. That\u0027s definitely better than creating this additional state for OutputFile.",
      "parentUuid": "d3b9570c_3a355be6",
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69273fd0_7c036639",
        "filename": "src/gn/target.h",
        "patchSetId": 10
      },
      "lineNbr": 509,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-09-03T18:33:14Z",
      "side": 1,
      "message": "The switch to std::optional is done. The logic to populate dependency_output_phony_ remains in FillOutputFiles, because we still need to set dependency_output_file_ \u003d dependency_output_phony_ if the phony has real inputs. We could potentially get rid of dependency_output_phony_ if we decide we don\u0027t want to output empty phony targets at all. Right now a header only source_set with no deps might look like this:\n\n  phony/foo/source_set: phony\n\nShould we omit this rule entirely?",
      "parentUuid": "e2672f3d_baaeb10c",
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a55efe9e_5b3c418c",
        "filename": "src/gn/target.h",
        "patchSetId": 10
      },
      "lineNbr": 509,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-09-11T21:38:52Z",
      "side": 1,
      "message": "I went ahead and omitted this build rule. I had left it in place so that the build.ninja phony targets had something to alias to, but now those will just be empty phony rules.",
      "parentUuid": "69273fd0_7c036639",
      "revId": "446796955e19534fc75b80071fc9b82013ee3d35",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "efd8ae52_ba91e572",
        "filename": "src/gn/ninja_rust_binary_target_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2023-07-06T14:46:49Z",
      "side": 1,
      "message": "This should also be done for non-final targets, see comment below.",
      "revId": "7d11a5da9f6e255b3d7c0a70c96d6d8e58f98698",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18c3c076_ab6c3dbb",
        "filename": "src/gn/ninja_rust_binary_target_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 378,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2023-07-06T14:46:49Z",
      "side": 1,
      "message": "nit: s/requires/required/ :-)",
      "revId": "7d11a5da9f6e255b3d7c0a70c96d6d8e58f98698",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1fd6f08_f2270d5f",
        "filename": "src/gn/ninja_rust_binary_target_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2023-07-06T14:46:49Z",
      "side": 1,
      "message": "This only pushes the lib_dirs value of the dependencies to the rlib command.\nThis is not enough to fix the bug because when depending directly on a static_library() target, the `path/to/foo.a` value will be in `nonrustdeps`, and must generate an `-Lnative\u003dpath/to` as well.",
      "revId": "7d11a5da9f6e255b3d7c0a70c96d6d8e58f98698",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b69552f6_721beeac",
        "filename": "src/gn/ninja_rust_binary_target_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1002072
      },
      "writtenOn": "2023-07-06T15:07:06Z",
      "side": 1,
      "message": "Could you help me understand why a GN deps on foo.a (which has no bearing on rust code) means that rustc needs the path to it when compiling a crate?",
      "parentUuid": "f1fd6f08_f2270d5f",
      "revId": "7d11a5da9f6e255b3d7c0a70c96d6d8e58f98698",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee68288c_a863f838",
        "filename": "src/gn/ninja_rust_binary_target_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2023-07-06T15:18:25Z",
      "side": 1,
      "message": "In this case because the lib.rs for the crate has `#[link(name \u003d \"foo\", kind \u003d \"static\")] ` directive.\n\nThe example I am referring to is [1] for the crate and [2] for the static_library(). Note that `rustc_library()` is a Fuchsia-specific GN template, but you can treat it as a `rust_library()` for simplicity.\n\n[1] https://cs.opensource.google/fuchsia/fuchsia/+/main:src/developer/ffx/lib/buildid/BUILD.gn;l\u003d7\n[2] https://cs.opensource.google/fuchsia/fuchsia/+/main:src/developer/ffx/lib/buildid/cpp/BUILD.gn;l\u003d5",
      "parentUuid": "b69552f6_721beeac",
      "revId": "7d11a5da9f6e255b3d7c0a70c96d6d8e58f98698",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d4fb7c3_9c5afc35",
        "filename": "src/gn/ninja_rust_binary_target_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2023-07-06T15:22:32Z",
      "side": 1,
      "message": "Also, we cannot guess the value of lib_dirs in the target definition for a dependency label, because the exact value will depend on the toolchain() definition used to build it (but the information is available after everything is resolved, i.e. in the ninja_rust_binary_target_writer.cc).",
      "parentUuid": "ee68288c_a863f838",
      "revId": "7d11a5da9f6e255b3d7c0a70c96d6d8e58f98698",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a37f581f_2500f526",
        "filename": "src/gn/ninja_rust_binary_target_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1002072
      },
      "writtenOn": "2023-07-06T15:30:59Z",
      "side": 1,
      "message": "In the case of a #[link] directive it\u0027s up to the tool to provides search paths through `-Lnative\u003d` or `-Lframework\u003d`\n\nBut I think you\u0027re saying that a GN deps\u003d[] rule should imply a `-Lnative\u003d` for rustc, so that you do not have to specify `ldflags` to the dependency. That could make sense, we should document this. The current documentation does not say this:\n\n```\n  Source sets, shared libraries, and non-complete static libraries will be\n  propagated up the dependency tree across groups, non-complete static\n  libraries and source sets.\n\n  Executables, shared libraries, and complete static libraries will link all\n  propagated targets and stop propagation. Actions and copy steps also stop\n  propagation, allowing them to take a library as an input but not force\n  dependents to link to it.\n\n  Propagation of all_dependent_configs and public_configs happens independently\n  of target type. all_dependent_configs are always propagated across all types\n  of targets, and public_configs are always propagated across public deps of\n  all types of targets.\n```\n\nWe don\u0027t need an -Clink-arg\u003d lines, as those are only passed through to the linker, which is not run.",
      "parentUuid": "4d4fb7c3_9c5afc35",
      "revId": "7d11a5da9f6e255b3d7c0a70c96d6d8e58f98698",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba35ded7_8eb2f413",
        "filename": "src/gn/ninja_rust_binary_target_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1002072
      },
      "writtenOn": "2023-07-06T15:46:14Z",
      "side": 1,
      "message": "Added another test case for deps on a C lib and ensuring it\u0027s path is included, does that look right? I will update the documentation too.",
      "parentUuid": "a37f581f_2500f526",
      "revId": "7d11a5da9f6e255b3d7c0a70c96d6d8e58f98698",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7195043_769060b4",
        "filename": "src/gn/ninja_rust_binary_target_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2023-07-06T15:46:41Z",
      "side": 1,
      "message": "Indeed, if I apply the following patch on top of yours, the corresponding GN binary fixes the issue by only passing the missing -Lnative\u003d\u003cdir\u003e flags:\n\n```\ndiff --git a/src/gn/ninja_rust_binary_target_writer.cc b/src/gn/ninja_rust_binary_target_writer.cc\nindex 41d2136b..e45f5ebb 100644\n--- a/src/gn/ninja_rust_binary_target_writer.cc\n+++ b/src/gn/ninja_rust_binary_target_writer.cc\n@@ -350,20 +350,22 @@ void NinjaRustBinaryTargetWriter::WriteExternsAndDeps(\n   }\n \n   // Non-Rust native dependencies.\n+\n+  // First -Lnative to specify the search directories of the nonrust libraries\n+  // specified to be linked in GN. Building an rlib with a\n+  // [link(name \u003d \"foo\", ...)] directive requires them, even if no real\n+  // linking operation occurs.\n+  UniqueVector\u003cSourceDir\u003e nonrustdep_dirs;\n+  for (const auto\u0026 nonrustdep : nonrustdeps) {\n+    nonrustdep_dirs.push_back(\n+        nonrustdep.AsSourceFile(settings_-\u003ebuild_settings()).GetDir());\n+  }\n+  for (const auto\u0026 nonrustdep_dir : nonrustdep_dirs) {\n+    out_ \u003c\u003c \" -Lnative\u003d\";\n+    path_output_.WriteDir(out_, nonrustdep_dir,\n+                          PathOutput::DIR_NO_LAST_SLASH);\n+  }\n   if (target_is_final) {\n-    UniqueVector\u003cSourceDir\u003e nonrustdep_dirs;\n-    for (const auto\u0026 nonrustdep : nonrustdeps) {\n-      nonrustdep_dirs.push_back(\n-          nonrustdep.AsSourceFile(settings_-\u003ebuild_settings()).GetDir());\n-    }\n-    // First -Lnative to specify the search directories of the nonrust libraries\n-    // specified to be linked in GN.\n-    //\n-    for (const auto\u0026 nonrustdep_dir : nonrustdep_dirs) {\n-      out_ \u003c\u003c \" -Lnative\u003d\";\n-      path_output_.WriteDir(out_, nonrustdep_dir,\n-                            PathOutput::DIR_NO_LAST_SLASH);\n-    }\n     // Before outputting any libraries to link, ensure the linker is in a mode\n     // that allows dynamic linking, as rustc may have previously put it into\n     // static-only mode.\n```",
      "parentUuid": "a37f581f_2500f526",
      "revId": "7d11a5da9f6e255b3d7c0a70c96d6d8e58f98698",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3027e5f4_12325220",
        "filename": "src/gn/ninja_rust_binary_target_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2023-07-06T15:47:25Z",
      "side": 1,
      "message": "Oh I see you did the same thing in patchset 2, let me reproduce this locally.",
      "parentUuid": "b7195043_769060b4",
      "revId": "7d11a5da9f6e255b3d7c0a70c96d6d8e58f98698",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ]
}
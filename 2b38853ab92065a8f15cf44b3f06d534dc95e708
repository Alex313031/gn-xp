{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "45cf516f_452abbd4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-04-26T08:03:24Z",
      "side": 1,
      "message": "these? I don\u0027t understand this statement well.",
      "range": {
        "startLine": 27,
        "startChar": 36,
        "endLine": 27,
        "endChar": 44
      },
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0cc3212_37a6eb7b",
        "filename": "src/gn/nested_set.h",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-04-26T08:09:22Z",
      "side": 1,
      "message": "These 2 order are not used in later CLs?",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 49,
        "endChar": 7
      },
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ceff15c0_27bce83f",
        "filename": "src/gn/nested_set.h",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2023-05-09T18:27:16Z",
      "side": 1,
      "message": "Yes, the plan is to use Include and Link order to handle ConfigValues in a future CL, but I never had the time to implement this. I am abandoning this CL for now, may reimplement it later slightly differently in the future if I have the time.",
      "parentUuid": "c0cc3212_37a6eb7b",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 49,
        "endChar": 7
      },
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc2fdebf_df71e0b9",
        "filename": "src/gn/nested_set.h",
        "patchSetId": 9
      },
      "lineNbr": 97,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-04-26T07:55:52Z",
      "side": 1,
      "message": "DCHECK_EQ?",
      "range": {
        "startLine": 97,
        "startChar": 6,
        "endLine": 97,
        "endChar": 12
      },
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "275b8ecf_c5539157",
        "filename": "src/gn/nested_set.h",
        "patchSetId": 9
      },
      "lineNbr": 97,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2023-05-09T18:27:16Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "dc2fdebf_df71e0b9",
      "range": {
        "startLine": 97,
        "startChar": 6,
        "endLine": 97,
        "endChar": 12
      },
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29270e93_a9333866",
        "filename": "src/gn/nested_set.h",
        "patchSetId": 9
      },
      "lineNbr": 98,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-04-26T07:55:52Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 98,
        "startChar": 6,
        "endLine": 98,
        "endChar": 12
      },
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15338a99_54acd7ca",
        "filename": "src/gn/nested_set.h",
        "patchSetId": 9
      },
      "lineNbr": 98,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2023-05-09T18:27:16Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "29270e93_a9333866",
      "range": {
        "startLine": 98,
        "startChar": 6,
        "endLine": 98,
        "endChar": 12
      },
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6317aa51_f37711a6",
        "filename": "src/gn/nested_set.h",
        "patchSetId": 9
      },
      "lineNbr": 422,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-04-26T07:55:52Z",
      "side": 1,
      "message": "why not use set?",
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04908c32_09d607d0",
        "filename": "src/gn/nested_set.h",
        "patchSetId": 9
      },
      "lineNbr": 422,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2023-05-09T18:27:16Z",
      "side": 1,
      "message": "A UniqueVector\u003c\u003e is significantly faster than an std::set or std::unordered_set in practice (based on multiple benchmarks I have performed during optimization work). It also uses far less memory.\n\nAnother benefit is that UniqueVector\u003c\u003e::push_back() returns a boolean that indicates whether a new item was added to the set, which simplifies the code a litte compared to using `std::set\u003c\u003e::insert().second`",
      "parentUuid": "6317aa51_f37711a6",
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e6ef301_28b5800d",
        "filename": "src/gn/nested_set.h",
        "patchSetId": 9
      },
      "lineNbr": 429,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-04-26T07:55:52Z",
      "side": 1,
      "message": "Why not \u0027C E D A B\u0027?\n\nI thought {C, E} is the last element pushed to stack and iteration of items started from that nested set?",
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c2544d4_a19459a6",
        "filename": "src/gn/nested_set.h",
        "patchSetId": 9
      },
      "lineNbr": 429,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2023-05-09T18:27:16Z",
      "side": 1,
      "message": "I believe it is just a typo on my part, and that should be `{A, B, {C, {D}}, {C, {E}}}` instead, but it has been a long time :)",
      "parentUuid": "4e6ef301_28b5800d",
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "621e3110_ae0fc0bf",
        "filename": "src/gn/nested_set.h",
        "patchSetId": 9
      },
      "lineNbr": 472,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-04-26T07:55:52Z",
      "side": 1,
      "message": "better to use for loop with rbegin/rend?",
      "range": {
        "startLine": 470,
        "startChar": 0,
        "endLine": 472,
        "endChar": 15
      },
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a597b65_cad43e13",
        "filename": "src/gn/nested_set.h",
        "patchSetId": 9
      },
      "lineNbr": 528,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-04-26T07:55:52Z",
      "side": 1,
      "message": "why not use set?",
      "revId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {},
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2b38853ab92065a8f15cf44b3f06d534dc95e708",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
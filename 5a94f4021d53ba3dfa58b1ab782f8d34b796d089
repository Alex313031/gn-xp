{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5c0d5f8a_886d3d9f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-01-10T16:05:34Z",
      "side": 1,
      "message": "Can you rename this to \"GN query server\" instead?\n\nA daemon typically designates a server process that moves itself to the background, which is not what is implemented here, and for good reasons (they require far more complexity that is not needed here). Using the proper terminology will be less confusing overall.",
      "revId": "5a94f4021d53ba3dfa58b1ab782f8d34b796d089",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2bb6e88_bb091a08",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-01-10T16:05:34Z",
      "side": 1,
      "message": "I suggest introducing a new \"query\" command that takes another GN command as sub-argument and related option. I.e. instead of using \"gn desc2 \u003cargs\u003e\" use \"gn query desc \u003cargs\u003e\", which will allow us to support more queries in the future without changing too much code.",
      "revId": "5a94f4021d53ba3dfa58b1ab782f8d34b796d089",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba56535c_a160e972",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-01-10T16:05:34Z",
      "side": 1,
      "message": "Please clarify that this is Linux specific (abstract socket namespaces do not exist in other operating systems, which makes things a little bit more painful to implement there, i.e. you essentially need a filesystem entry like $HOME/.local/\u003cmy-socket\u003e, and a PID file that will indicate whether a server process is actually bound to it (unlike abstract ones, they do not get killed when the process crashes or stops unexpectedly, etc..). Updating the PID file atomically is also a fun operation :-/ And then there is Windows.",
      "revId": "5a94f4021d53ba3dfa58b1ab782f8d34b796d089",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec75770b_8d0d7889",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-01-10T16:05:34Z",
      "side": 1,
      "message": "Very nice work! Please see comments below.",
      "revId": "5a94f4021d53ba3dfa58b1ab782f8d34b796d089",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1db7823d_f74fa5ac",
        "filename": "src/gn/command_desc.cc",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-01-10T16:05:34Z",
      "side": 1,
      "message": "Note that while this works in this specific case, this approach is not very scalable and will not work with other commands. Also, errors are not propagated, and they are important too.\n\nThe simplest and correct way to achieve what you want is to redirect stdout/stderr , temporarily during the query execution, to file descriptors/handles that are passed from the client itself (easy to do with Unix sockets, on Windows it\u0027s a lot more technical :-)). This will minimize all changes to the query code itself too.",
      "revId": "5a94f4021d53ba3dfa58b1ab782f8d34b796d089",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "467aef74_677b703d",
        "filename": "src/gn/command_desc.cc",
        "patchSetId": 1
      },
      "lineNbr": 638,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-01-10T16:05:34Z",
      "side": 1,
      "message": "nit: should use `const Setup*` or `const Setup\u0026` here since this is a read-only use case.",
      "revId": "5a94f4021d53ba3dfa58b1ab782f8d34b796d089",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4596b19d_0d28a7b8",
        "filename": "src/gn/command_desc.cc",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-01-10T16:05:34Z",
      "side": 1,
      "message": "I recommend using `auto setup \u003d std::make_unique\u003cSetup\u003e()` here, since normally the setup object is leaked by GN to speed up process exit, which is not really a worry in the case of the query server.",
      "revId": "5a94f4021d53ba3dfa58b1ab782f8d34b796d089",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc8bcd91_e14b8da1",
        "filename": "src/gn/command_start_server.cc",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-01-10T16:05:34Z",
      "side": 1,
      "message": "Alternatively:\n\n  std::vector\u003cstd::string\u003e SplitArgs(std::string_view input) {\n    while (size_t zero \u003d input.find(´\\0´) !\u003d input.npos) {\n      result.emplace_back(input.substr(0, zero));\n      input \u003d input.remove_prefix(zero + 1);\n    }\n    result.append(input);\n    return result;\n  }",
      "revId": "5a94f4021d53ba3dfa58b1ab782f8d34b796d089",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "418b1e76_b663b953",
        "filename": "src/gn/command_start_server.cc",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-01-10T16:05:34Z",
      "side": 1,
      "message": "not that the current implementation ignores the input after the last \\0, i.e. \"foo\\0bar\" -\u003e [\"foo\"]. Is this intentional?",
      "revId": "5a94f4021d53ba3dfa58b1ab782f8d34b796d089",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39ef0ef0_657ee4da",
        "filename": "src/gn/command_start_server.cc",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-01-10T16:05:34Z",
      "side": 1,
      "message": "nit: also use `auto setup \u003d std::unique_ptr\u003cSetup\u003e()` here instead, it\u0027s cleaner :-)",
      "revId": "5a94f4021d53ba3dfa58b1ab782f8d34b796d089",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5940948_2841114d",
        "filename": "src/gn/command_start_server.cc",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-01-10T16:05:34Z",
      "side": 1,
      "message": "nit: This comment should probably go over line 118 instead.",
      "revId": "5a94f4021d53ba3dfa58b1ab782f8d34b796d089",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ]
}
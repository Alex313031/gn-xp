{
  "comments": [
    {
      "key": {
        "uuid": "fa288cd8_3b6c0516",
        "filename": "tools/gn/metadata_walk.cc",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2018-11-27T20:50:36Z",
      "side": 1,
      "message": "This seems like it might make a nice helper on SourceDir. Put it by SourceAbsoluteWithOneSlash() and we can have it return a StringPiece like that function to avoid allocating. Also, then we can add a unit test for it since it will be easy to call externally.",
      "revId": "4efced5c904197684346073ee8bd1089189bc912",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd86a0ce_95c71f96",
        "filename": "tools/gn/metadata_walk.cc",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2018-11-28T01:48:10Z",
      "side": 1,
      "message": "A range-based loop is shorthand for an iterator-based loop.\nThis is using an index rather than an iterator because of the mutation issue, so perhaps say, \"... an index-based loop instead of an iterator- or range-based one.\"",
      "revId": "4efced5c904197684346073ee8bd1089189bc912",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a21a89d2_9d41440a",
        "filename": "tools/gn/metadata_walk.cc",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2018-11-28T01:48:10Z",
      "side": 1,
      "message": "I think this can be `return {};`.",
      "revId": "4efced5c904197684346073ee8bd1089189bc912",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "575aa5b3_df990b25",
        "filename": "tools/gn/metadata_walk.cc",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2018-11-28T01:48:10Z",
      "side": 1,
      "message": "DCHECK since this should have been vetted at a higher layer?",
      "revId": "4efced5c904197684346073ee8bd1089189bc912",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fb1bafe_e74f9a84",
        "filename": "tools/gn/metadata_walk.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2018-11-28T01:48:10Z",
      "side": 1,
      "message": "The order here is relevant to the eventual result list, so perhaps call that issue out explicitly in a comment.",
      "revId": "4efced5c904197684346073ee8bd1089189bc912",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86dd0111_94ffe96d",
        "filename": "tools/gn/metadata_walk.cc",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2018-11-28T01:48:10Z",
      "side": 1,
      "message": "This seems dubious to me.  Shouldn\u0027t the labels be fully canonicalized (i.e. to \"label_with_toolchain\") beforehand and then only match exactly?",
      "revId": "4efced5c904197684346073ee8bd1089189bc912",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "534bc11b_44e7a4de",
        "filename": "tools/gn/metadata_walk.cc",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2018-11-28T01:48:10Z",
      "side": 1,
      "message": "Should probably use label-with-toolchain in the error since referring to the same label in a different toolchain is an error likely to be confusing.",
      "revId": "4efced5c904197684346073ee8bd1089189bc912",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00c10e38_725c774d",
        "filename": "tools/gn/metadata_walk.cc",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2018-11-28T01:48:10Z",
      "side": 1,
      "message": "Is this in some way substantially better than just making `next_walk_keys` local within the for block scope?  That seems cleaner and less error-prone to me (to wit, this line is not necessary and couldn\u0027t be accidentally forgotten or removed, or skipped with a `continue;` somewhere in the block).",
      "revId": "4efced5c904197684346073ee8bd1089189bc912",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99561d84_964150c2",
        "filename": "tools/gn/metadata_walk.cc",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2018-11-27T20:50:36Z",
      "side": 1,
      "message": "I think the Chrome Clang plugins will warn on this but I guess the GN build isn\u0027t set up with that. Basically you should remove the std::move().\n\nBackground: One should never do a std::move for a return statement. Without the move it will do return value optimization in many cases so the stack variable will actually refer to the return location and there\u0027s no copy or move. When you type move explicitly, it forces the local variable to be different than the return value and prevents the optimization.",
      "revId": "4efced5c904197684346073ee8bd1089189bc912",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d0b6d16_578b5046",
        "filename": "tools/gn/metadata_walk.h",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2018-11-27T20:50:36Z",
      "side": 1,
      "message": "This should have a comment with a high-level description of what it does.",
      "revId": "4efced5c904197684346073ee8bd1089189bc912",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a7d5bbfb_afb0a948",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2022-04-06T13:26:28Z",
      "side": 1,
      "message": "I think the reason Chromium does not have this problem, while pigweed do, is that pigweed does use \u0027{{source_root_relative_dir}}\u0027 (or similar) to construct the name of the output, while Chromium uses \u0027{{target_out_dir}}/{{label_name}\u0027 as the output directory.\n\nE.g. in build/toolchain/apple/toolchain.gni:\n\n    # Object files go in this directory. Use label_name instead of\n    # target_output_name since labels will generally have no spaces and will be\n    # unique in the directory.\n    object_subdir \u003d \"{{target_out_dir}}/{{label_name}}\"\n\n    tool(\"cc\") {\n      depfile \u003d \"{{output}}.d\"\n      ...\n      outputs \u003d [ \"$object_subdir/{{source_name_part}}.o\" ]\n    }\n\nSo in retrospect, I agree with Nico. The issue is in pigweed toolchain definition and not in gn. If pigweed wants to use unique paths, then it needs to not use \u0027{{source_root_relative_dir}}\u0027 but instead build unique names like Chromium rules do.\n\nSorry, but I may have given +2 too quickly (I don\u0027t know why, my window didn\u0027t include any odf the discussion, and I only saw it in my email inbox after the fact).",
      "revId": "ab9104586734cb45aa77c70ca5042edbcc9f6aa5",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17fb4f43_710f8226",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2022-04-06T13:29:05Z",
      "side": 1,
      "message": "For the moment, this will allow gn to roll, but I think a proper fix should go in pigweed, and then maybe this CL rolled back.",
      "revId": "ab9104586734cb45aa77c70ca5042edbcc9f6aa5",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba302c63_85d91c05",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-04-06T16:01:24Z",
      "side": 1,
      "message": "I have reverted the CL, but I cannot find a way to make the Fuchsia build not leak the build directory without this CL.\n\nI think the root of the problem is that we have the following concurrent requirements:\n\n- We are generating source files in one toolchain, and need to compile them in another toolchain.\n\n- We also need to compute the path of the generated files _and_ also those of some of their object files at GN parse time (essentially to copy or process them).\n\nWe currently use `{{source_out_dir}}/{{target_output_name}}.{{source_file_part}}.o` for our `outputs` tool() definitions. This works because we can recompute this with get_label_info() use in GN templates.\n\nI have tried using `{{target_out_dir}}/{{source_target_relative}}/{{target_output_name}}.{{source_file_part}}.o` instead, but then it becomes impossible to guess the path of object files using `get_label_info()` as we need to (since the function doesn\u0027t support \"source_target_relative\", understandably).\n\nI have tried using `{{target_out_dir}}/{{target_output_name}}` and I end up with multiple conflicts (e.g. when a source_set() has sources like \u0027src/x64/foo.cc\u0027, \u0027src/arm64/foo.cc\u0027, and we have a large number of these cases).\n\nI have tried using `{{target_out_dir}}/{{label_name}}` and I end up with the same conflicts.\n\nIf you have any recommendation to fix this, I would be happy to see them. I suspect that the CL will be needed after all to cover our use case. Note that GN already does something similar with the ABS_PATH literal which is used to expand target_out_dir and target_gen_dir for sources files with absolute paths.\n\nWhat do you think?",
      "revId": "ab9104586734cb45aa77c70ca5042edbcc9f6aa5",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a24ffb45_6535927d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2022-04-06T16:11:40Z",
      "side": 1,
      "message": "I think I will defer to Brett here.",
      "parentUuid": "ba302c63_85d91c05",
      "revId": "ab9104586734cb45aa77c70ca5042edbcc9f6aa5",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d105767_aa245e68",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2022-04-08T14:12:51Z",
      "side": 1,
      "message": "Friendly ping for brettw@, I still don\u0027t have another solution, and this is the last remaining issue that prevents the roll of upstream GN to the Fuchsia build :-/",
      "revId": "ab9104586734cb45aa77c70ca5042edbcc9f6aa5",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ]
}
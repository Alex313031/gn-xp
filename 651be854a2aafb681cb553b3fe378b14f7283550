{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6fd4afd8_4324a411",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002472
      },
      "writtenOn": "2022-11-04T14:41:38Z",
      "side": 1,
      "message": "Thanks David for fixing this. Just to mention that this is blocking our autorollers, so @Brett, would appreciate expedited review.\n\nThat said, a follow up gn developers could do is to accept `.hpp*` as `SOURCE_H`, so we won\u0027t have this problem in the future for `hpp17`, `hpp20` etc (if ever). Also, I\u0027m not sure if it\u0027s too late for it now, but the whole issue could be avoided if gn didn\u0027t conflate \"files to build\" and \"files needed for build\" in the same list (`sources`). If I could provide headers in a separate list, you probably wouldn\u0027t need to even care what the extensions are.",
      "revId": "651be854a2aafb681cb553b3fe378b14f7283550",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7663d51b_d3b994a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2022-11-04T16:49:34Z",
      "side": 1,
      "message": "This seems like a custom file extension that a random team made up. A quick Google search seems to indicate that this particular file may literally be the only file in the world that uses this naming pattern. That\u0027s fine, but it doesn\u0027t strike me that it means we should be hardcoding all such extensions in the build as that doesn\u0027t seem to be a long-term sustainable solution. Is there a reference that this naming pattern is actually recommended?\n\nYou don\u0027t *have* to list the headers in the BUILD.gn files. Just removing the reference should unblock your rollers.\n\nWhat having headers listed in the BUILD.gn files will affect is the ability of \"gn check\" to catch downstream misuses of that header. If you want that, I would recommend making a file \"spiriv_cpp11.h\" or something that just includes this weird one. Then your code and downstream users use your wrapper header which will have correct dependency tracking in GN.",
      "revId": "651be854a2aafb681cb553b3fe378b14f7283550",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "874fc7ea_daf0b5ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2022-11-04T16:57:35Z",
      "side": 1,
      "message": "You should be able to unblock yourself by removing the reference for now. I\u0027m adding Takuto for an opinion which I will defer to in case I\u0027m being too grumpy.",
      "revId": "651be854a2aafb681cb553b3fe378b14f7283550",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b272c74_f9cfc229",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002472
      },
      "writtenOn": "2022-11-04T18:27:16Z",
      "side": 1,
      "message": "\u003e the ability of \"gn check\" to catch downstream misuses of that header\n\nThat is part of the issue, we do fail the bots when `gn check` fails.\n\n\u003e I would recommend making a file \"spiriv_cpp11.h\" or something that just includes this weird one\n\nWouldn\u0027t `gn check` still complain about the `hpp11` file being included in _that_ file?",
      "parentUuid": "7663d51b_d3b994a7",
      "revId": "651be854a2aafb681cb553b3fe378b14f7283550",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c8abc09_205b6826",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2022-11-04T19:17:13Z",
      "side": 1,
      "message": "No, \"gn check\" ignores any include not declared in a BUILD.gn file.",
      "parentUuid": "8b272c74_f9cfc229",
      "revId": "651be854a2aafb681cb553b3fe378b14f7283550",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "835df1ab_c3addbc1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001842
      },
      "writtenOn": "2022-11-04T19:55:11Z",
      "side": 1,
      "message": "I see it still erroring out.\n\nFor this experiment I directly #included spirv.hpp11 from the third_party/vulkan-deps/spirv-tools/source/latest_version_spirv_header.h\n\nThen I get this output, for either \"check\" or \"gen\":\n\n$ gn.original check out\nERROR at //third_party/vulkan-deps/spirv-headers/src/BUILD.gn:35:5: Only source, header, and object files belong in the sources of a source_set. //third_party/vulkan-deps/spirv-headers/src/include/spirv/1.2/spirv.hpp11 is not one of the valid types.\n    \"include/spirv/1.2/spirv.hpp11\",\n    ^------------------------------\nSee //third_party/vulkan-deps/spirv-tools/src/BUILD.gn:479:6: which caused the file to be included.\n     \"${spirv_headers}:spv_headers\",\n     ^-----------------------------\n     \n     \n     \nThe .hpp11 file comes from SPIR-V headers which is part of the Vulkan ecosystem (Khronos Group), and has a publishing history back to 2015.\nChanging the structure of that header set entails standards body meetings with GPU makers.  (Trying to not sound too grumpy either.)",
      "parentUuid": "8b272c74_f9cfc229",
      "revId": "651be854a2aafb681cb553b3fe378b14f7283550",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f029b489_c14ec6de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2025-07-29T13:55:15Z",
      "side": 1,
      "message": "I kind of don\u0027t love this. Not allowing newlines in string literals prevented a class of bugs where you accidentally forget a closing quote and things accidentally still parsed, but different than what you wanted. And wanting a newline in a string is rare, and as digit@ points out, it\u0027s already possible to do this in the rare case where it\u0027s needed.\n\nDo we really need this change?",
      "revId": "acfe5fde8c5475a9a83bd55f3f222a6dbbcbd0ae",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d13f3bc2_d291813e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2025-07-30T04:33:27Z",
      "side": 1,
      "message": "I think forgetting a closing quote can cause a significant parsing error, making it difficult to create a build that works incorrectly in a subtle way. Instead, it would probably fail loudly.\n\nThe main motivation for this change is to let users write more readable statements, especially in asserts, by using newlines easily. The current method for adding a newline is hard to find and less common than typical solutions like `\\n`. I think this difficulty tends to discourage developers from writing longer, more descriptive statements that would be more helpful.",
      "parentUuid": "f029b489_c14ec6de",
      "revId": "acfe5fde8c5475a9a83bd55f3f222a6dbbcbd0ae",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb0c8365_1128b68f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2025-07-30T12:19:49Z",
      "side": 1,
      "message": "It\u0027s still a rare usecase, given we\u0027ve been living with the current state for a long time.\n\n(And in asserts, the formatting of a string with newlines will look weird. Usually you want to do some kind of \"ignore leading indent\" kind of feature to make the formatting nicer, etc.)\n\nAlmost no other language allows newlines in their strings, due to them not deeming the tradeoff worth it. Some have a *separate* form of string literals that allow newlines, so that you don\u0027t use them accidentally.\n\nAlso, the \"fail loudly\" error diagnostic is worse now, right?",
      "parentUuid": "d13f3bc2_d291813e",
      "revId": "acfe5fde8c5475a9a83bd55f3f222a6dbbcbd0ae",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4374a17_e4d02ead",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-07-30T16:37:08Z",
      "side": 1,
      "message": "Personally, I think it\u0027s somewhat archaic to not allow newlines in literals, and I\u0027ve never seen someone (apart from Nico, now) make the claim that it\u0027s a tradeoff not worth making due to risk of errors. Instead, I think that languages haven\u0027t historically had them because it makes parsing the language more complicated; at least one example might be the fact that newlines can be different on different platforms (\\r vs \\n vs \\r\\n, etc.) and you might have to decide how to handle that difference. Having multiline literals also makes grepping for strings harder.\n\nCertainly more and more languages have added support for multiline literals over time, but I believe they use new syntax for that for backwards compatibility more than any other reason. \n\nI would be surprised if the concern Nico raises came up much if at all in practice (i.e., I agree with Takuto there), but I do think missing quotes can lead to weird error messages, which is close to what Nico suggests.\n\nThat said, I also don\u0027t think this\u0027d be used very much, and I don\u0027t think multiline literals are that useful unless they also have support for special processing of leading whitespace on a line, which this CL doesn\u0027t introduce, so I don\u0027t think it\u0027s that useful on its own. And unlike many or most languages (perhaps), I think there is limited to no utility for multiline string literals outside of debugging messages in GN.\n\nSo, I still think this is a good change, but I don\u0027t feel like it is so useful it absolutely should be made. A better change would probably include a convention for newline handling and leading whitespace, but that\u0027s probably more work than is really worth it.",
      "parentUuid": "fb0c8365_1128b68f",
      "revId": "acfe5fde8c5475a9a83bd55f3f222a6dbbcbd0ae",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac"
    }
  ]
}
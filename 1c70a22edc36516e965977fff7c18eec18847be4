{
  "comments": [
    {
      "key": {
        "uuid": "fdec6182_9d7a01e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-08-27T16:47:31Z",
      "side": 1,
      "message": "Hi Brett,\n\nI\u0027m working with phosek@ on attempting to switch out stamp files with phony targets. So far I\u0027ve experimented with source_sets and groups, and the expected behavior lines up, but there is one semantic difference. Phony targets that have no inputs are treated by ninja as always dirty and rebuilt every time. So far, I\u0027ve only encountered this with header only source_sets that have no object files or additional dependencies. Since any targets that depend on this phony target would pick up the header dependency through depfiles, it seems like the best approach is to omit the dependency on the phony target in that case. \n\nI could use some implementation advice on the best way to omit the dependency. The initial approach I\u0027ve taken is to just to not set target.dependency_output_file_ when the target will be a phony with no real inputs. This works, but I\u0027m not sure it is ideal. Some other options I see:\n\n  1. When a target is resolved, walk through the dependency lists and remove any that would result in phony targets. While the most obvious downside is removal from vector, I was also concerned that we would also omit the dependency when using other GN commands like desc.\n  2. In the ninja_*_writers, check whether a dependency should be omitted before calling path_output_.WriteFile. This seems reasonable, if a bit challenging to cover all spots.\n  3. Make OutputFile aware that it is a phony and whether it should be omitted from printing. We could then check that in PathOutput::WriteFile(s) and the handful of bespoke output writes.\n\nIs there a better approach? Thanks!",
      "revId": "1c70a22edc36516e965977fff7c18eec18847be4",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c276da6_598c3976",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-08-29T16:30:50Z",
      "side": 1,
      "message": "Hi, thanks for the well-explained question. I kind of like keeping the dependency output file empty to indicate there is none. Code using this should check for empty and then not output a dependency. I think that\u0027s the semantics that we want, right?\n\nThe problem is likely that a bunch of places use this and expect it to be nonempty. But it sounds like we will need to update all of these places anyway. Maybe start and see if this change looks tractable?\n\nI don\u0027t think we should change the dependency graph for the reasons you were concerned about (confusing \"desc\" for example).",
      "parentUuid": "fdec6182_9d7a01e7",
      "revId": "1c70a22edc36516e965977fff7c18eec18847be4",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2bf69fa_548ed361",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000633
      },
      "writtenOn": "2020-09-02T18:14:50Z",
      "side": 1,
      "message": "Yes, those are the semantics we are after. I think I\u0027ve tracked down all the relevant uses of dependency_output_file() and added bool checks for those cases. I\u0027ve been testing this with Fuchsia and Chromium builds. So far, I haven\u0027t run into any issues. Are there any other clients you would recommend testing with? Due to the impact, I want to make sure I\u0027m not missing anything.",
      "parentUuid": "1c276da6_598c3976",
      "revId": "1c70a22edc36516e965977fff7c18eec18847be4",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": false
    }
  ]
}
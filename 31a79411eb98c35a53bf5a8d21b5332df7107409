{
  "comments": [
    {
      "key": {
        "uuid": "72b8ceb9_e4466de2",
        "filename": "src/gn/command_gen.cc",
        "patchSetId": 5
      },
      "lineNbr": 300,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-14T05:52:36Z",
      "side": 1,
      "message": "Nit: These should be aligned.",
      "range": {
        "startLine": 300,
        "startChar": 26,
        "endLine": 300,
        "endChar": 30
      },
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1afdf720_68ab954b",
        "filename": "src/gn/command_gen.cc",
        "patchSetId": 5
      },
      "lineNbr": 462,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-04-14T00:40:16Z",
      "side": 1,
      "message": "Maybe we should add a disclaimer about how this output is unstable and may change?",
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71f5a587_a962644c",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-14T05:52:36Z",
      "side": 1,
      "message": "Nit: no curly braces around single statement.",
      "range": {
        "startLine": 85,
        "startChar": 16,
        "endLine": 85,
        "endChar": 17
      },
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4225b685_6718a5f7",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 97,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-14T05:52:36Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 97,
        "startChar": 16,
        "endLine": 97,
        "endChar": 17
      },
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c566e2e6_10994675",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-04-14T00:40:16Z",
      "side": 1,
      "message": "you can leave out the length, `sysroot_crates[] \u003d {...`",
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b33068c9_35c21819",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2020-04-14T09:26:33Z",
      "side": 1,
      "message": "Also please avoid creating global C++ objects with non-trivial constructors (they make the code larger and slower to start).\n\nIn this specific example, using const std::string_view instead, which has a constexpr constructor should be enough.",
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28d75566_4ef1ce94",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-04-14T00:40:16Z",
      "side": 1,
      "message": "I wish we could avoid hardcoding these, but it would require adding a toml parser to GN ðŸ˜ž",
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5f8bc02_80b71f1a",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-04-14T00:40:16Z",
      "side": 1,
      "message": "ditto",
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50cd82cf_6e1c5430",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-04-14T00:40:16Z",
      "side": 1,
      "message": "pass by const ref",
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "156a2aaf_4ae87ce0",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1000067
      },
      "writtenOn": "2020-04-14T09:26:33Z",
      "side": 1,
      "message": "Alternatively, use a std::string_view (by value) or a const std::string_view\u0026 (by const reference) instead of a string.",
      "parentUuid": "50cd82cf_6e1c5430",
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fa6b436_0e27314d",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 165,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-04-14T00:40:16Z",
      "side": 1,
      "message": "I just saw something referring to the sysroot location as \"permanently unstable\". This also wouldn\u0027t work if we had a wrapper script in a different dir. Is there a way we can invoke `rustc --print sysroot` to get it instead of hardcoding?",
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab9c3b9d_69a6b0e5",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-14T05:52:36Z",
      "side": 1,
      "message": "Should this be hardcoded? How is this going to get changed when new edition comes out?",
      "range": {
        "startLine": 170,
        "startChar": 40,
        "endLine": 170,
        "endChar": 44
      },
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08034c80_141a127f",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 309,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-14T05:52:36Z",
      "side": 1,
      "message": "Incomplete sentence.",
      "range": {
        "startLine": 309,
        "startChar": 7,
        "endLine": 309,
        "endChar": 41
      },
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "679a31a7_db2aab83",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 310,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-14T05:52:36Z",
      "side": 1,
      "message": "This is fragile and is going to break e.g. when someone tries to use a wrapper around rustc.",
      "range": {
        "startLine": 310,
        "startChar": 25,
        "endLine": 310,
        "endChar": 36
      },
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba8b7f3d_d9d27ee9",
        "filename": "src/gn/rust_project_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 328,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-14T05:52:36Z",
      "side": 1,
      "message": "target-\u003esource_types_used().RustSourceUsed()",
      "range": {
        "startLine": 326,
        "startChar": 4,
        "endLine": 328,
        "endChar": 15
      },
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18eb85e0_497ceda8",
        "filename": "src/gn/rust_project_writer.h",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-14T05:52:36Z",
      "side": 1,
      "message": "There doesn\u0027t seem to be any target_filters parameter.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 61
      },
      "revId": "31a79411eb98c35a53bf5a8d21b5332df7107409",
      "serverId": "c360c8e5-7aa8-3905-a7a0-810934766dac",
      "unresolved": true
    }
  ]
}